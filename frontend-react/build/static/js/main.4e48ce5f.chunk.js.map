{"version":3,"sources":["components/Basic/logoutnav.jsx","components/Basic/Loader.jsx","components/Basic/nav.jsx","components/WelcomePage.jsx","API/api.js","components/Customer/Tokensale/Wallet.jsx","components/Customer/Tokensale/BuyToken.jsx","components/Customer/Watersale/exchangelist.jsx","components/Customer/Watersale/WaterSalePage.jsx","components/Customer/Watersale/Deliverystatus.jsx","components/Customer/Watersale/rejectform.jsx","components/Customer/UserProfilePage.jsx","API/damwaterlevelfinder.js","components/Exchange/exchangewallet.jsx","components/Exchange/tokensale.jsx","components/Basic/slowloader.jsx","components/Exchange/WaterExchangeProfile.jsx","components/Customer/Signup/Signup.jsx","components/Exchange/exchangesignup.jsx","components/RTI/rti.jsx","Routes/Routes.js","serviceWorker.js","index.js","functions/helper.js","components/Admin/AdminProfile.jsx","components/Basic/ipfsloader.jsx","components/JS/welcome.js"],"names":["LogoutNavbar","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","Component","withRouter","Loader","state","role","Navbar","welcome","style","color","class","data-period","data-type","bg","axios","require","checkethprice","get","then","response","JSON","stringify","data","USD","Wallet","props","backgroundColor","this","ether_to_Dollar_Price","oxd_to_Eth_Price","tokenBalance","Web3","utils","fromWei","ethBalance","BuyToken","etherAmount","etherPrice","onSubmit","event","tokenAmount","ether","preventDefault","ethercurrentprice","toString","ethertowei","window","web3","toWei","input","value","buyTokens","setState","for","required","id","onChange","ref","Exchangelist","handleSelectChange","a","target","name","selectexchange","i","exchanges","length","exchange","region","cluster","account","waterExchangeinst","exchangeAddress","exchange_Count","location","buffer","loading","hash","loadWeb3","loadBlockchaindata","eth","getAccounts","accounts","net","getId","networkId","WaterExchangeData","Waterexchange","networks","Contract","abi","address","parseInt","methods","exchangeCount","call","localExchange","console","log","scope","map","ex","key","exchangeNumber","drinkingWaterquantity","nonDrinkingwaterQuantity","crypto","WaterSale","handleSubmit","trim","exchangedetail","alert","tokenamount","rate","waterQuantity","deliveryrate","waterSaleinst","getstatus","from","status","mykey","createCipher","mobno","update","contactno","final","waterPurchase","watertype","customercategory","customerno","send","on","token","approve","handleInputChange","localExchangetokenrate","tokenrate","drinkingrate","drinkingtokenrate","nondrinkingrate","nondrinkingtokenrate","industrydrinkingtokenrate","industrynondrinkingtokenrate","deliverycharge","waterBalance","deliverylist","deliveredlist","totalpurchase_Count","pendinglist","watersaleaddr","totalcharge","KycData","Kyc","kycInst","registration","customerdetail","customertcategory","customernumber","waterquantity","WaterSaleData","Sale","tokenData","OxidaneToken","disabled","onClick","DeliveryStatus","receivesubmit","currentTarget","Confirmation","rejectList","receivedList","deliverytime","purchasenumber","userpurchaseno","userglobalnoretriever","getUserpurchaseStatus","getPastEvents","filter","globalpurchasenumber","fromBlock","toBlock","err","events","n","pendingarray","returnValues","m","deliveredarray","p","receivedarray","q","rejectarray","exchangeaddr","_quantity","_time","b","quantity","c","Rejectform","rejectSubmit","purchaseno","eventvalue","currenttimestamp","Math","round","Date","getTime","decreaseAllowance","rejectdelivery","exchangepurchaseno","Profilepage","oxdPriceFinder","price","oxdPrice","toFixed","etherprice","tokenSaleinst","loadBlockchainData","tokenSaleAddress","tokenRate","interval","setInterval","clearInterval","getBalance","balanceOf","tokensaleData","TokenSale","tokensale","Deliverystatus","fetch","jsdom","loaddamdata","damno","damData_async_fetch","damAPI","KuttiadyAPI_URL","KuttiadyResponse","text","KuttiadyData","MalampuzhaAPI_URL","MalampuzhaResponse","MalampuzhaData","NeyyarAPI_URL","NeyyarResponse","NeyyarData","KuttiadyResult","MalampuzhaResult","NeyyarResult","ChimoniAPI_URL","ChulliyarAPI_URL","KalladaAPI_URL","KanjirapuzhaAPI_URL","KarapuzhaAPI_URL","MalankaraAPI_URL","MangalamAPI_URL","MeenkaraAPI_URL","MoolatharaAPI_URL","PambaAPI_URL","PazhassiAPI_URL","PeechiAPI_URL","PeriyarAPI_URL","PothundyAPI_URL","SiruvaniAPI_URL","VazhaniAPI_URL","WalayarAPI_URL","result","resultArray","fetchingDOM","push","JSDOM","dateWiseWaterLevel","domlength","calculatedlength","document","querySelector","rows","parseFloat","cells","innerHTML","r","FRLdata","j","FRL","querySelectorAll","slice","percentage","a1","ExchangeWallet","DrinkingwaterBalance","NonDrinkingwaterBalance","DrinkingwaterRate","IndustryDrinkingRate","NonDrinkingwaterRate","IndustryNonDrinkingRate","DeliveryCharge","Tokensale","oxdsellPriceFinder","avgtokenrate","sellingrate","sellTokens","etheramount","etherpricesum","totalethprice","totalweiethprice","tokenpurchasenumber","totaltokenpurchaseno","isNaN","slowLoader","height","position","top","width","Exchangeprofile","incrementWater","mintAmount","waterType","damwaterleveldata","triggerdelivery","timestamp","triggerDelivery","updateDeliverycharge","deliveryCharge","registered","rejectlist","drinkingWaterBalance","nonDrinkingwaterBalance","drinkingWaterrate","nonDrinkingwaterRate","industrynondrinkingWaterrate","industrydrinkingWaterrate","tokencharge","purchaseNumber","deliveryNumber","deliverynumber","getExchangepurchaseDetails","pending","_purchaseNumber","damwaterlevelrawdata","ratecalculator","encType","mykey1","createDecipher","mystr1","phoneno","_deliverylocation","customer","Signup","setCustomer","category","authenticate","acountno","signup","Exchangesignup","exchangecount","textAlign","RTI","rejectedarray","key1","ex2","key2","key3","Routes","path","exact","component","Welcomepage","Adminpage","Rti","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","unregister","catch","error","message","ethereum","enable","currentProvider","ipfs","ipfsClient","host","port","protocol","Adminprofile","captureFile","file","files","reader","FileReader","readAsArrayBuffer","onloadend","Buffer","register","add","registerExchange","certificate","IPFSLoader","TxtType","el","toRotate","period","loopNum","txt","tick","isDeleting","prototype","fullTxt","substring","that","delta","random","setTimeout","onload","elements","getElementsByClassName","getAttribute","parse","css","createElement","body","appendChild"],"mappings":"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","file":"static/js/main.4e48ce5f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { signout } from \"../../functions/helper\";\nclass LogoutNavbar extends Component {\n  render() {\n    return (\n      <div>\n        <nav className=\"nav nav-tabs  btn-outline-info\">\n          <a className=\"navbar-brand text-white\"  href=\"#\">\n            OXIDANE\n          </a>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarTogglerDemo02\"\n            aria-controls=\"navbarTogglerDemo02\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <form className=\"form-inline my-2 my-lg-0\">\n            <Link to=\"/\">\n              <button\n                className=\"btn btn-success my-2 my-sm-0\"\n                type=\"submit\"\n              >\n                LOGOUT\n              </button>\n            </Link>\n          </form>\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(LogoutNavbar);\n","import React, { Component } from \"react\";\nclass Loader extends Component {\n  state = {};\n  render() {\n    return (\n      <div>\n        <div className=\"text-center\">\n          <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Loader;\n","import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nclass Navbar extends Component {\n  render() {\n    return (\n      <div>\n        <ul className=\"nav nav-tabs\">\n          <li className=\"nav-item\">\n            <Link className=\"nav-link active\" to=\"/\">\n              Home\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/signup\">\n              User\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/exchangesignup\">\n              Water-Exchange\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/Rti\">\n              RTI\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/admin\">\n              Admin\n            </Link>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Navbar);\n","import React, { Component } from 'react';\nimport { Link, withRouter } from \"react-router-dom\";\nimport ParticlesBg from \"particles-bg\";\nimport Navbar from \"./Basic/nav\"\nimport \"./css/welcomepage.css\"\nimport \"./JS/welcome\"\n\n\n\n\nclass welcome extends Component {\n    render() { \n        return ( \n            <div >\n           <Navbar/>\n           <div className=\"typewriter\">\n          <h1>\n            <Link\n              style={{\n                color: \"#221f3b\",\n              }}\n              class=\"typewrite\"\n              data-period=\"2000\"\n              data-type='[ \"Hi, Im OXIDANE.\", \"Im a Water Trading Dapp <br> For Public.\", \"I Sell OXD Tokens.\", \"I Give Pure Drops for OXD Tokens\",\"You can trust me bcoz Im Powered by <br> Blockchain\" ]'\n            >\n              <span class=\"wrap\"></span>\n            </Link>\n          </h1>\n{/* <div className=\"dropdown\">\n         \n<button className=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n    Dropdown button\n  </button>\n  <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n\n  <Link className=\"dropdown-item\"to=\"/signup\">Do You want to Sign up?</Link>\n  \n  <Link className=\"dropdown-item\"to=\"/signup\"> Registered user?</Link>\n \n  <Link className=\"dropdown-item\"to=\"/\">WaterExchange-Info</Link>\n  <Link className=\"dropdown-item\"to=\"/exchangesignup\"> Registered Exchange?</Link>\n  <Link className=\"dropdown-item\"to=\"/admin\">ADMIN</Link>\n\n</div>\n        </div> */}\n            <ParticlesBg type=\"cobweb\"color=\"#221f3b\" bg={true}  />     \n            </div>\n            </div>\n         );\n    }\n}\n \nexport default withRouter (welcome);","const axios=require(\"axios\");\n\nexport const checkethprice=()=>{\n   //Fetching Etherprice in dollars\n    return axios.get(\"https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD\").then(response=>{\n        // console.log(response.data.USD);     // test-point\n        return JSON.stringify(response.data.USD)   \n  \n      })\n    \n}\n","import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport \"../../css/wallet.css\";\nclass Wallet extends Component {\n  //###################### STATES - SECTION-->START #####################\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  //###################### STATES - SECTION-->END #####################\n\n  // ############## RENDERING SECTION--->START ################\n  render() {\n    return (\n      <div className=\"container wallet\">\n        <div\n          className=\"card card border-danger text-white \"\n          style={{\n            backgroundColor: \"#221f3b\",\n          }}\n        >\n          <div className=\"card-header\">CURRENT ETHER PRICE</div>\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">DOLLARS</h5>\n            <h5 className=\"card-title\">{this.props.ether_to_Dollar_Price} $</h5>\n            <div class=\"spinner-grow text-danger\" role=\"status\">\n              <span class=\"sr-only\">Loading...</span>\n            </div>\n          </div>\n        </div>\n\n        <div\n          className=\"card card border-success text-white \"\n          style={{\n            backgroundColor: \"#221f3b\",\n          }}\n        >\n          <div className=\"card-header\">CURRENT OXD PRICE</div>\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">{this.props.oxd_to_Eth_Price}</h5>\n            ETHER\n          </div>\n        </div>\n\n        <div\n          className=\"card card border-warning text-white \"\n          style={{\n            backgroundColor: \"#221f3b\",\n          }}\n        >\n          <div className=\"card-header\">MY OXD BALANCE</div>\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">OXD</h5>\n            <h5 className=\"card-title\">{this.props.tokenBalance}</h5>\n          </div>\n        </div>\n\n        <div\n          className=\"card card border-info text-white \"\n          style={{\n            backgroundColor: \"#221f3b\",\n          }}\n        >\n          <div className=\"card-header\">MY ETHER BALANCE</div>\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">ETHER</h5>\n            <h5 className=\"card-title\">\n              {Web3.utils.fromWei(this.props.ethBalance, \"ether\")}\n            </h5>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n// ############## RENDERING SECTION--->END  ################\nexport default Wallet;\n","import React, { Component } from \"react\";\nimport \"../../css/buytokens.css\";\nclass BuyToken extends Component {\n  //###################### STATES - SECTION-->START #####################\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      etherAmount: \"\",\n      etherPrice: \"0\",\n    };\n  }\n\n  //###################### STATES - SECTION-->END #####################\n\n  // ############## RENDERING SECTION--->START ################\n  render() {\n    return (\n      <div className=\"buytokens\">\n       <div\n          className=\"card card border-light text-white \"\n          style={{\n            backgroundColor: \"#221f3b\",\n          }}\n        >\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">BUY TOKENS</h5>\n            <form\n              onSubmit={(event) => {\n                event.preventDefault();\n                let tokenAmount;\n                let ether;\n                //Fetching current etherprice from parent component\n                let ethercurrentprice = this.props.oxd_to_Eth_Price.toString();\n                //converting ether to Wei\n                let ethertowei = window.web3.utils.toWei(\n                  ethercurrentprice,\n                  \"Ether\"\n                );\n                //Fetching Tokenamount from input\n                tokenAmount = this.input.value;\n                //Fetching calculated token - ether cost amount and converting to string form\n                ether = this.state.etherAmount.toString();\n                //token-ether cost is converted to Wei\n                ether = window.web3.utils.toWei(ether, \"Ether\");\n                // console.log(ethercurrentprice);//test-point\n                // console.log(tokenAmount);//test-point\n                // console.log(ether);//test-point\n                //submitting value to buy function in parent component\n                this.props.buyTokens(tokenAmount, ether, ethertowei);\n                //after submitting states are cleared\n                this.input.value = \"\";\n                this.setState({ etherAmount: \"\" });\n              }}\n            >\n              <div className=\"form-group \">\n                <label className=\"text-black\" for=\"exampleInputEmail1\">\n                  Token Amount\n                </label>\n                {/* Fetching Tokenamount */}\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  required\n                  id=\"exampleInputEmail1\"\n                  onChange={(event) => {\n                    const tokenAmount = this.input.value.toString();\n                    // calculating Ether amount\n                    this.setState({\n                      etherAmount: this.props.oxd_to_Eth_Price * tokenAmount,\n                    });\n                  }}\n                  ref={(input) => {\n                    this.input = input;\n                  }}\n                />\n              </div>\n              <div className=\"form-group\">\n                {/* Displaying Token-cost */}\n                <label for=\"exampleInputPassword1\">ETHER PRICE</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"exampleInputPassword1\"\n                  value={this.state.etherAmount}\n                />\n              </div>\n              <button type=\"submit\" class=\"btn btn-primary\">\n                Submit\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n// ############## RENDERING SECTION--->END  ################\nexport default BuyToken;\n","import React, { Component } from \"react\";\nimport { loadWeb3 } from \"../../../functions/helper\";\nimport Waterexchange from \"../../../contracts/Waterexchange.json\";\nclass Exchangelist extends Component {\n  async componentWillMount() {\n    await loadWeb3();\n    await this.loadBlockchaindata();\n  }\n\n  //############ LOAD BLOCKCHAIN DATA & CREATING CONTRACT INSTANCE SECTION-->START ############\n\n  async loadBlockchaindata() {\n    this.setState({ loading: true });\n    const web3 = window.web3;\n\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n\n    //GETTING NETWORKID\n\n    const networkId = await web3.eth.net.getId();\n\n    //CREATING WATER EXCHANGE CONTRACT INSTANCE\n\n    const WaterExchangeData = Waterexchange.networks[networkId];\n    if (WaterExchangeData) {\n      const waterExchangeinst = new web3.eth.Contract(\n        Waterexchange.abi,\n        WaterExchangeData.address\n      );\n      this.setState({ waterExchangeinst });\n\n      //FETCHING TOTAL NUMBER OF EXCHNAGES\n\n      const exchange_Count = parseInt(\n        await this.state.waterExchangeinst.methods.exchangeCount().call()\n      );\n      this.setState({ exchange_Count });\n\n      //FETCHING EXCHANGE DETAILS\n\n      for (var i = 1; i <= this.state.exchange_Count; i++) {\n        let exchangeAddress = await waterExchangeinst.methods\n          .exchange(i)\n          .call();\n        let exchange = await waterExchangeinst.methods\n          .localExchange(exchangeAddress)\n          .call();\n        this.setState({ exchanges: [...this.state.exchanges, exchange] });\n      }\n    }\n    this.setState({ loading: false });\n    console.log(this.state.exchanges);\n  }\n\n  //############ LOAD BLOCKCHAIN DATA & CREATING INSTANCE- SECTION-->END ############\n\n  //###################### STATES - SECTION-->START #####################\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      waterExchangeinst: {},\n      exchangeAddress: \"\",\n      exchanges: [],\n      exchange_Count: \"\",\n      location: \"\",\n      buffer: null,\n      loading: false,\n      hash: \"\",\n      selectexchange: [],\n      cluster: 0,\n    };\n  }\n  //###################### STATES - SECTION-->END #####################\n\n  //##### FRONT-END DATA FETCHING & SMART-CONTRACT FUNCTION INTERACTION - SECTION-->START #######\n  //Function to select exchanges based on user input\n  handleSelectChange = async (event) => {\n    event.preventDefault();\n\n    this.setState({\n      [event.target.name]: event.target.value,\n      selectexchange: [],\n    });\n    await this.setState({ selectexchange: [] });\n    // console.log(this.state.cluster);\n\n    //Iterating through all exchanges\n    for (var i = 0; i <= this.state.exchanges.length - 1; i++) {\n      var exchange = this.state.exchanges[i];\n      var cluster = exchange.region;\n      // console.log(cluster);\n\n      //If selected cluster is equal to cluster\n      if (cluster == this.state.cluster) {\n        //store selected exchange\n        this.setState({\n          selectexchange: [\n            ...this.state.selectexchange,\n            this.state.exchanges[i],\n          ],\n        });\n      }\n    }\n  };\n  //##### FRONT-END DATA FETCHING & SMART-CONTRACT FUNCTION INTERACTION - SECTION-->END #######\n  // ############## RENDERING SECTION--->START ################\n  render() {\n    return (\n      <div className=\"container\">\n        <div\n          className=\"card card border-info text-white \"\n          style={{\n            backgroundColor: \"#221f3b\",\n          }}\n        >\n          <div className=\"card-body\">\n            {/* Display selected exchanges */}\n            <h5 className=\"card-title\">AVAILABLE WATER EXCHANGES</h5>\n            <table className=\"table table-bordered  table-white\">\n              <thead className=\"thead-dark\">\n                <tr>\n                  <th scope=\"col\">Exchange no</th>\n                  <th scope=\"col\">Exchange Address</th>\n                  <th scope=\"col\">Available Drinking Water</th>\n                  <th scope=\"col\">Available Non Drinking Water</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.selectexchange.map((ex, key) => {\n                  return (\n                    <tr className=\"table-light\">\n                      <th scope=\"row\">{ex.exchangeNumber}</th>\n                      <td>{ex.exchangeAddress}</td>\n                      <td>{ex.drinkingWaterquantity}</td>\n                      <td>{ex.nonDrinkingwaterQuantity}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          {/* Fetching cluster */}\n          <form className=\"container\">\n            <div className=\"form-group\">\n              <label for=\"exampleFormControlSelect1\" className=\"text-white\">\n                Cluster\n              </label>\n              <select\n                className=\"form-control\"\n                id=\"exampleFormControlSelect1\"\n                name=\"cluster\"\n                onChange={this.handleSelectChange}\n              >\n                <option>select cluster</option>\n                <option value=\"0\">Central Kerala</option>\n                <option value=\"1\">North Kerala</option>\n                <option value=\"2\">South Kerala</option>\n              </select>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n// ############## RENDERING SECTION--->END ################\nexport default Exchangelist;\n","import React, { Component } from \"react\";\nimport { loadWeb3 } from \"../../../functions/helper\";\nimport Kyc from \"../../../contracts/Kyc.json\";\nimport Sale from \"../../../contracts/Watersale.json\";\nimport Waterexchange from \"../../../contracts/Waterexchange.json\";\nimport OxidaneToken from \"../../../contracts/OxidaneToken.json\";\nimport Loader from \"../../Basic/Loader\";\nconst crypto = require(\"crypto\");\nclass WaterSale extends Component {\n  async componentWillMount() {\n    await loadWeb3();\n    await this.loadBlockchaindata();\n  }\n\n  //############ LOAD BLOCKCHAIN DATA & CREATING CONTRACT INSTANCE SECTION-->START ############\n\n  async loadBlockchaindata() {\n    const web3 = window.web3;\n\n    //FETCHING ACCOUNT\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n\n    //GETTING NETWORKID\n    const networkId = await web3.eth.net.getId();\n\n    //CREATING KYC CONTRACT INSTANCE\n    const KycData = Kyc.networks[networkId];\n    if (KycData) {\n      const kycInst = new web3.eth.Contract(Kyc.abi, KycData.address);\n      this.setState({ kycInst });\n      let customerdetail = await kycInst.methods\n        .registration(this.state.account)\n        .call({ from: this.state.account });\n      let customercategory = customerdetail.customertcategory;\n      let customernumber = customerdetail.customerno;\n      this.setState({ customercategory });\n      this.setState({ customernumber });\n    } else {\n      window.alert(\"Kyc contract not deployed to network\");\n    }\n\n    //CREATING WATEREXCHANGE CONTRACT INSTANCE\n\n    const WaterExchangeData = Waterexchange.networks[networkId];\n    if (WaterExchangeData) {\n      //WATEREXCHANGE INSTANCE\n\n      const waterExchangeinst = new web3.eth.Contract(\n        Waterexchange.abi,\n        WaterExchangeData.address\n      );\n      this.setState({ waterExchangeinst });\n      const exchange = await waterExchangeinst.methods\n        .localExchange(this.state.account)\n        .call();\n\n      //FETCHING WATERBALANCE\n      const waterBalance = exchange.waterquantity;\n      console.log(waterBalance);\n      this.setState({ waterBalance });\n    } else {\n      window.alert(\"Waterexchange contract not deployed to network\");\n    }\n\n    //CREATING WATERSALE CONTRACT INSTANCE\n    const WaterSaleData = Sale.networks[networkId];\n    if (WaterSaleData) {\n      const waterSaleinst = new web3.eth.Contract(\n        Sale.abi,\n        WaterSaleData.address\n      );\n      this.setState({ waterSaleinst });\n      this.setState({ watersaleaddr: WaterSaleData.address });\n    } else {\n      window.alert(\"Tokensale contract not deployed to network\");\n    }\n\n    //CREATING TOKEN INSTANCE\n    const tokenData = OxidaneToken.networks[networkId];\n    if (tokenData) {\n      const token = new web3.eth.Contract(OxidaneToken.abi, tokenData.address);\n      this.setState({ token });\n    } else {\n      window.alert(\"Token contract not deployed to network\");\n    }\n  }\n\n  //############ LOAD BLOCKCHAIN DATA & CREATING INSTANCE- SECTION-->END ############\n\n  //###################### STATES - SECTION-->START #####################\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      waterExchangeinst: {},\n      waterQuantity: 0,\n      waterSaleinst: {},\n      exchangeAddress: \"\",\n      waterBalance: 0,\n      token: {},\n      rate: 0,\n      location: \"\",\n      deliverylist: [],\n      deliveredlist: [],\n      totalpurchase_Count: 0,\n      pendinglist: [],\n      watertype: 0,\n      watersaleaddr: \"\",\n      cluster: 0,\n      loading: false,\n      drinkingrate: 0,\n      nondrinkingrate: 0,\n      deliveryrate: 0,\n      totalcharge: 0,\n      customercategory: 0,\n      contactno: \"\",\n    };\n  }\n\n  //###################### STATES - SECTION-->END #####################\n\n  //##### FRONT-END DATA FETCHING & SMART-CONTRACT FUNCTION INTERACTION - SECTION-->START #######\n\n  //FUNCTION TO SUBMIT DATA\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    //Checking Selected Delivery Cluster is same as selected exchange cluster\n    let exchangedetail = await this.state.waterExchangeinst.methods\n      .localExchange(this.state.exchangeAddress.trim())\n      .call();\n    let cluster = exchangedetail.region;\n    if (cluster != this.state.cluster) {\n      alert(\"Exchange cant deliver on this Cluster\");\n    } else {\n      //Calculating total token cost\n      let tokenamount =\n        this.state.rate * this.state.waterQuantity + this.state.deliveryrate;\n      //checking user has any pending delivery from the exchange\n      //customer is not allowed to make multiple purchase at a time from same water exchange before delivery\n      let status = await this.state.waterSaleinst.methods\n        .getstatus(this.state.exchangeAddress)\n        .call({ from: this.state.account });\n      console.log(status);\n      if (status) {\n        alert(\"You are not allowed to make multiple purchase before delivery\");\n      } else {\n        //Encrypting mobile no\n        var mykey = crypto.createCipher(\"aes-128-cbc\", \"mypassword\");\n        var mobno = mykey.update(this.state.contactno, \"utf8\", \"hex\");\n        mobno += mykey.final(\"hex\");\n\n        //Triggering waterpurchase\n        await this.state.waterSaleinst.methods\n          .waterPurchase(\n            this.state.waterQuantity,\n            this.state.exchangeAddress,\n            tokenamount,\n            this.state.location,\n            this.state.watertype,\n            this.props.customercategory,\n            this.props.customerno,\n            mobno\n          )\n          .send({ from: this.state.account })\n          .on(\"transactionHash\", async (hash) => {\n            //Triggering approval of tokens to exchange\n            await this.state.token.methods\n              .approve(this.state.exchangeAddress.trim(), tokenamount)\n              .send({ from: this.state.account });\n          });\n      }\n    }\n  };\n\n  // FUNCTION TO HANDLE INPUT\n\n  handleInputChange = async (event) => {\n    event.preventDefault();\n    await this.setState({\n      [event.target.name]: event.target.value,\n    });\n    if (this.state.exchangeAddress != \"\") {\n      try {\n        let tokenrate = await this.state.waterExchangeinst.methods\n          .localExchangetokenrate(this.state.exchangeAddress.trim())\n          .call();\n\n        if (this.state.customercategory == 0) {\n          //Fetching drinkingwater rate from exchange\n          let drinkingrate = tokenrate.drinkingtokenrate;\n          this.setState({ drinkingrate });\n\n          //Fetching non-drinkingwater rate from exchange\n          let nondrinkingrate = tokenrate.nondrinkingtokenrate;\n          this.setState({ nondrinkingrate });\n        }\n        if (this.state.customercategory == 1) {\n          //Fetching industry drinkingwater rate from exchange\n          let drinkingrate = tokenrate.industrydrinkingtokenrate;\n          this.setState({ drinkingrate });\n\n          //Fetching industry non-drinkingwater rate from exchange\n          let nondrinkingrate = tokenrate.industrynondrinkingtokenrate;\n          this.setState({ nondrinkingrate });\n        }\n        //Fetching deliveryrate\n        let deliveryrate = parseInt(tokenrate.deliverycharge);\n        this.setState({ deliveryrate });\n\n        //if user select drinking type rate of token will of drinkingwater rate\n        if (this.state.watertype == 0) {\n          this.setState({ rate: this.state.drinkingrate });\n        }\n        //if user select non-drinking type rate of token will of non-drinkingwater rate\n        if (this.state.watertype == 1) {\n          this.setState({ rate: this.state.nondrinkingrate });\n        }\n      } catch (err) {\n        console.log(err);\n        alert(\"wrong Input\");\n        this.setState({ exchangeAddress: \"\" });\n      }\n    }\n  };\n\n  //##### FRONT-END DATA FETCHING & SMART-CONTRACT FUNCTION INTERACTION - SECTION--->END #######\n\n  // ############## RENDERING SECTION--->START ################\n\n  render() {\n    if (this.state.loading == true) {\n      return <Loader />;\n    } else {\n      return (\n        <div className=\" container\">\n          <div\n            className=\"card card border-light text-white \"\n            style={{\n              backgroundColor: \"#221f3b\",\n            }}\n          >\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">BUY WATER</h5>\n              <div className=\"form-group\">\n                <label for=\"exampleInputPassword1\">Exchange Address</label>\n                {/* Fetching Exchange address */}\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"exampleInputPassword1\"\n                  name=\"exchangeAddress\"\n                  onChange={this.handleInputChange}\n                />\n              </div>\n              <div className=\"form-group \">\n                <label className=\"text-black\" for=\"exampleInputEmail1\">\n                  WaterType\n                </label>\n                <div className=\"row\">\n                  <div className=\"col-md-6 col-12\">\n                    <label for=\"exampleFormControlSelect1\">\n                      Select WaterType\n                    </label>\n                    {/* Fetching watertype */}\n                    <select\n                      className=\"form-control\"\n                      id=\"exampleFormControlSelect1\"\n                      name=\"watertype\"\n                      onChange={this.handleInputChange}\n                    >\n                      <option>Select watertype</option>\n                      <option value=\"0\">Drinking</option>\n                      <option value=\"1\">NonDrinking</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n              {/* Displaying drinking-water rate */}\n              <div className=\"form-group\">\n                <label for=\"exampleInputPassword1\">Drinking Tokenrate</label>\n                <input\n                  type=\"number\"\n                  class=\"form-control\"\n                  id=\"exampleInputPassword1\"\n                  name=\"waterQuantity\"\n                  value={this.state.drinkingrate}\n                  disabled=\"true\"\n                />\n              </div>\n              {/* Displaying non-drinking-water rate */}\n              <div className=\"form-group\">\n                <label for=\"exampleInputPassword1\">\n                  Non Drinking Tokenrate\n                </label>\n                <input\n                  type=\"number\"\n                  class=\"form-control\"\n                  id=\"exampleInputPassword1\"\n                  name=\"waterQuantity\"\n                  value={this.state.nondrinkingrate}\n                  disabled=\"true\"\n                />\n              </div>\n              {/* Displaying Delivery Rate */}\n              <div className=\"form-group\">\n                <label for=\"exampleInputPassword1\">Delivery Rate</label>\n                <input\n                  type=\"number\"\n                  class=\"form-control\"\n                  id=\"exampleInputPassword1\"\n                  name=\"waterQuantity\"\n                  value={this.state.deliveryrate}\n                  disabled=\"true\"\n                />\n              </div>\n              {/* Fetching Water Quantity */}\n              <div className=\"form-group\">\n                <label for=\"exampleInputPassword1\">Water Quantity(kl)</label>\n                <input\n                  type=\"number\"\n                  class=\"form-control\"\n                  id=\"exampleInputPassword1\"\n                  name=\"waterQuantity\"\n                  onChange={this.handleInputChange}\n                />\n              </div>\n              {/* Displaying Token cost */}\n              <div className=\"form-group\">\n                <label for=\"exampleInputPassword1\">Total OXD Amount</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"exampleInputPassword1\"\n                  value={\n                    this.state.rate * this.state.waterQuantity +\n                    this.state.deliveryrate\n                  }\n                  disabled=\"true\"\n                />\n              </div>\n\n              <div className=\"form-group \">\n                <label className=\"text-black\" for=\"exampleInputEmail1\">\n                  Delivery Cluster\n                </label>\n                <div className=\"row\">\n                  <div className=\"col-md-6 col-12\">\n                    <label for=\"exampleFormControlSelect1\">\n                      Select Delivery Cluster\n                    </label>\n                    {/* Fetching watertype */}\n                    <select\n                      className=\"form-control\"\n                      id=\"exampleFormControlSelect1\"\n                      name=\"cluster\"\n                      onChange={this.handleInputChange}\n                    >\n                      <option>Select Cluster</option>\n                      <option value=\"0\">Central Kerala</option>\n                      <option value=\"1\">North Kerala</option>\n                      <option value=\"2\">South Kerala</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n\n              {/* Fetching Delivery Address */}\n              <div className=\"form-group\">\n                <label for=\"exampleInputPassword1\">Delivery Location</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"exampleInputPassword1\"\n                  name=\"location\"\n                  onChange={this.handleInputChange}\n                />\n              </div>\n\n              <div className=\"form-group\">\n                <label for=\"exampleInputPassword1\">contact no</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"exampleInputPassword1\"\n                  name=\"contactno\"\n                  onChange={this.handleInputChange}\n                />\n              </div>\n\n              <button\n                type=\"submit\"\n                onClick={this.handleSubmit}\n                className=\"btn btn-primary\"\n              >\n                Buy\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n// ############## RENDERING SECTION--->END  ################\nexport default WaterSale;\n","import React, { Component } from \"react\";\nimport { loadWeb3 } from \"../../../functions/helper\";\nimport Sale from \"../../../contracts/Watersale.json\";\nimport OxidaneToken from \"../../../contracts/OxidaneToken.json\";\nclass DeliveryStatus extends Component {\n  async componentWillMount() {\n    await loadWeb3();\n    await this.loadBlockchaindata();\n  }\n\n  //############ LOAD BLOCKCHAIN DATA & CREATING CONTRACT INSTANCE SECTION-->START ############\n\n  async loadBlockchaindata() {\n    const web3 = window.web3;\n\n    //FETCHING ACCOUNT\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n\n    //GETTING NETWORKID\n    const networkId = await web3.eth.net.getId();\n\n    //CREATING TOKEN CONTRACT INSTANCE\n    const tokenData = OxidaneToken.networks[networkId];\n    if (tokenData) {\n      const token = new web3.eth.Contract(OxidaneToken.abi, tokenData.address);\n      this.setState({ token });\n    }\n\n    //CREATING WATERSALE CONTRACT INSTANCE\n\n    const WaterSaleData = Sale.networks[networkId];\n    if (WaterSaleData) {\n      const waterSaleinst = new web3.eth.Contract(\n        Sale.abi,\n        WaterSaleData.address\n      );\n\n      //storing instance\n      this.setState({ waterSaleinst });\n\n      //Fetching Total- User-Purchase count\n      const totalpurchase_Count = await this.state.waterSaleinst.methods\n        .userpurchaseno(this.state.account)\n        .call();\n      console.log(totalpurchase_Count);\n      //Storing count\n      this.setState({ totalpurchase_Count });\n      // initialising user pending delivery list array with empty value\n      this.setState({ pendinglist: [] });\n      // initialising user delivered list array with empty value\n      this.setState({ deliveredlist: [] });\n      // initialising user received list array with empty value\n      this.setState({ receivedList: [] });\n      //iterating through each purchase number of user\n      this.setState({ rejectList: [] });\n      for (var i = 1; i <= this.state.totalpurchase_Count; i++) {\n        //Fetching all the uinque global purchase number of user\n        var purchasenumber = await this.state.waterSaleinst.methods\n          .userglobalnoretriever(this.state.account, i)\n          .call();\n        console.log(purchasenumber);\n        //storing purchase number\n        this.setState({ purchasenumber });\n        //Fetching purchase status of each Purchase Number\n        var status = await this.state.waterSaleinst.methods\n          .getUserpurchaseStatus(this.state.account, this.state.purchasenumber)\n          .call();\n        this.setState({ status });\n        console.log(this.state.status);\n        // if status is in paid state(status 0=paid,1=Delivered,2=Received,3=Reject)\n        if (this.state.status == \"0\") {\n          //Fetching Data from waterpurchase event with global purchase number as filter\n          await this.state.waterSaleinst.getPastEvents(\n            \"WaterPurchase\",\n            {\n              filter: { globalpurchasenumber: this.state.purchasenumber },\n              fromBlock: 0,\n              toBlock: \"latest\",\n            },\n            (err, events) => {\n              console.log(\"====>purchaseevents\", events);\n              for (var n = 0; n <= events.length - 1; n++) {\n                var pendingarray = events[n].returnValues;\n                //storing all the list in pending list array\n                this.setState({\n                  pendinglist: [...this.state.pendinglist, pendingarray],\n                });\n              }\n            }\n          );\n          console.log(this.state.pendinglist);\n        }\n        // if status is in Delivered state(status 0=paid,1=Delivered,2=Received,3=Reject)\n        if (this.state.status == \"1\") {\n          //Fetching Data from waterDelivery event with global purchase number as filter\n          await this.state.waterSaleinst.getPastEvents(\n            \"WaterDelivery\",\n            {\n              filter: { globalpurchasenumber: this.state.purchasenumber },\n              fromBlock: 0,\n              toBlock: \"latest\",\n            },\n            (err, events) => {\n              console.log(\"====>deliveredevents\", events);\n              for (var m = 0; m <= events.length - 1; m++) {\n                var deliveredarray = events[m].returnValues;\n                //storing all the list in delivered list array\n                this.setState({\n                  deliveredlist: [...this.state.deliveredlist, deliveredarray],\n                });\n              }\n            }\n          );\n        }\n        // if status is in Received state(status 0=paid,1=Delivered,2=Received,3=Reject)\n        if (this.state.status == \"2\") {\n          //Fetching Data from DeliveryConfirmation event with global purchase number as filter\n          await this.state.waterSaleinst.getPastEvents(\n            \"DeliveryConfirmation\",\n            {\n              filter: { globalpurchasenumber: this.state.purchasenumber },\n              fromBlock: 0,\n              toBlock: \"latest\",\n            },\n            (err, events) => {\n              console.log(\"====>receiveddevents\", events);\n              for (var p = 0; p <= events.length - 1; p++) {\n                var receivedarray = events[p].returnValues;\n                //storing all the list in receivedList list array\n                this.setState({\n                  receivedList: [...this.state.receivedList, receivedarray],\n                });\n              }\n            }\n          );\n        }\n\n        if (this.state.status == \"3\") {\n          //Fetching Data from DeliveryConfirmation event with global purchase number as filter\n          await this.state.waterSaleinst.getPastEvents(\n            \"DeliveryRejection\",\n            {\n              filter: { globalpurchasenumber: this.state.purchasenumber },\n              fromBlock: 0,\n              toBlock: \"latest\",\n            },\n            (err, events) => {\n              console.log(\"====>rejecteddevents\", events);\n              for (var q = 0; q <= events.length - 1; q++) {\n                var rejectarray = events[q].returnValues;\n                //storing all the list in receivedList list array\n                this.setState({\n                  rejectList: [...this.state.rejectList, rejectarray],\n                });\n              }\n            }\n          );\n        }\n      }\n      console.log(this.state.receivedList);\n    } else {\n      window.alert(\"Tokensale contract not deployed to network\");\n    }\n  }\n\n  //############ LOAD BLOCKCHAIN DATA & CREATING INSTANCE- SECTION-->END ############\n\n  //###################### STATES - SECTION-->START #####################\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      waterExchangeinst: {},\n      waterSaleinst: {},\n      exchangeAddress: \"\",\n      token: {},\n      deliverylist: [],\n      rejectList: [],\n      deliveredlist: [],\n      totalpurchase_Count: 0,\n      pendinglist: [],\n      receivedList: [],\n      deliverytime: 0,\n      tokenamount: 0,\n      purchasenumber: 0,\n      status: 0,\n    };\n  }\n\n  //###################### STATES - SECTION-->END #####################\n\n  //##### FRONT-END DATA FETCHING & SMART-CONTRACT FUNCTION INTERACTION - SECTION-->START #######\n\n  //function to Trigger receive water delivery for customer user\n  receivesubmit = async (event) => {\n    event.preventDefault();\n    console.log(event.currentTarget.value);\n    console.log(event.currentTarget.name);\n    //Triggering confirmation\n    await this.state.waterSaleinst.methods\n      .Confirmation(\n        event.currentTarget.value,\n        event.currentTarget.name,\n        this.props.customerno\n      )\n      .send({ from: this.state.account })\n      .on(\"transactionHash\", (hash) => {\n        this.loadBlockchaindata();\n      });\n  };\n\n  //##### FRONT-END DATA FETCHING & SMART-CONTRACT FUNCTION INTERACTION - SECTION-->END #######\n  // ############## RENDERING SECTION--->START ################\n  render() {\n    return (\n      <div className=\"container\">\n        <div\n          className=\"card card border-danger text-white \"\n          style={{\n            backgroundColor: \"#221f3b\",\n          }}\n        >\n          <div className=\"card-body\">\n            {/* Displaying Pending list */}\n            <h5 className=\"card-title\">DELIVERY PENDING LIST</h5>\n            <table className=\"table table-bordered text-white\">\n              <thead className=\"thead-dark\">\n                <tr className=\"\">\n                  <th scope=\"col\">SL NO</th>\n                  <th scope=\"col\">PurchaseNO</th>\n                  <th scope=\"col\">Exchange Address</th>\n                  <th scope=\"col\">WaterType</th>\n                  <th scope=\"col\">Quantity</th>\n                  <th scope=\"col\">Timestamp</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.pendinglist.map((ex, key) => {\n                  var a;\n                  if (ex.watertype == 0) {\n                    a = \"Drinking\";\n                  } else {\n                    a = \"Non-Drinking\";\n                  }\n                  return (\n                    <tr>\n                      <th scope=\"row\">{key}</th>\n                      <td>{ex.globalpurchasenumber}</td>\n                      <td>{ex.exchangeaddr}</td>\n                      <td>{a}</td>\n                      <td>{ex._quantity}</td>\n                      <td>{ex._time}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        <div\n          className=\"card card border-warning text-white\"\n          style={{\n            backgroundColor: \"#221f3b\",\n          }}\n        >\n          <div className=\"card-body\">\n            {/* Displaying Delivered list */}\n            <h5 className=\"card-title\">DELIVERED LIST</h5>\n            <table className=\"table table-bordered text-white\">\n              <thead className=\"thead-dark\">\n                <tr className=\"\">\n                  <th scope=\"col\">SL NO</th>\n                  <th scope=\"col\">PurchaseNO</th>\n                  <th scope=\"col\">Exchange Address</th>\n                  <th scope=\"col\">WaterType</th>\n                  <th scope=\"col\">Quantity</th>\n                  <th scope=\"col\">Timestamp</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.deliveredlist.map((ex, key) => {\n                  var b;\n                  if (ex.watertype == 0) {\n                    b = \"Drinking\";\n                  } else {\n                    b = \"Non-Drinking\";\n                  }\n                  return (\n                    <tr className=\"\">\n                      <th scope=\"row\">{key}</th>\n                      <td>{ex.globalpurchasenumber}</td>\n                      <td>{ex.exchangeaddr}</td>\n                      <td>{b}</td>\n                      <td>{ex.quantity}</td>\n                      <td>{ex._time}</td>\n\n                      <td>\n                        <button\n                          type=\"submit\"\n                          className=\"btn btn-success\"\n                          name={ex.exchangeaddr}\n                          value={ex.globalpurchasenumber}\n                          onClick={this.receivesubmit}\n                        >\n                          Received\n                        </button>{\" \"}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n        {/* Displaying Received list */}\n        <div\n          className=\"card card border-success text-white \"\n          style={{\n            backgroundColor: \"#221f3b\",\n          }}\n        >\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">RECEIVED LIST</h5>\n            <table className=\"table table-bordered text-white\">\n              <thead className=\"thead-dark\">\n                <tr>\n                  <th scope=\"col\">SL NO</th>\n                  <th scope=\"col\">PurchaseNO</th>\n                  <th scope=\"col\">Exchange Address</th>\n                  <th scope=\"col\">WaterType</th>\n                  <th scope=\"col\">Quantity</th>\n                  <th scope=\"col\">Timestamp</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.receivedList.map((ex, key) => {\n                  var c;\n                  if (ex.watertype == 0) {\n                    c = \"Drinking\";\n                  } else {\n                    c = \"Non-Drinking\";\n                  }\n                  return (\n                    <tr className=\"\">\n                      <th scope=\"row\">{key}</th>\n                      <td>{ex.globalpurchasenumber}</td>\n                      <td>{ex.exchangeaddr}</td>\n                      <td>{c}</td>\n                      <td>{ex.quantity}</td>\n                      <td>{ex._time}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        <div\n          className=\"card card border-success text-white \"\n          style={{\n            backgroundColor: \"#221f3b\",\n          }}\n        >\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">REJECTED LIST</h5>\n            <table className=\"table table-bordered text-white\">\n              <thead className=\"thead-dark\">\n                <tr>\n                  <th scope=\"col\">SL NO</th>\n                  <th scope=\"col\">PurchaseNO</th>\n                  <th scope=\"col\">Exchange Address</th>\n                  <th scope=\"col\">Timestamp</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.rejectList.map((ex, key) => {\n                  return (\n                    <tr className=\"\">\n                      <th scope=\"row\">{key}</th>\n                      <td>{ex.globalpurchasenumber}</td>\n                      <td>{ex.exchangeaddr}</td>\n                      <td>{ex._time}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n// ############## RENDERING SECTION--->END ################\nexport default DeliveryStatus;\n","import React, { Component } from \"react\";\nimport { loadWeb3 } from \"../../../functions/helper\";\nimport \"../../css/userprofile.css\"\nimport Sale from \"../../../contracts/Watersale.json\";\nimport Waterexchange from \"../../../contracts/Waterexchange.json\";\nimport OxidaneToken from \"../../../contracts/OxidaneToken.json\";\nimport Loader from \"../../Basic/Loader\";\nclass Rejectform extends Component {\n  async componentWillMount() {\n    await loadWeb3();\n    await this.loadBlockchaindata();\n  }\n\n  //############ LOAD BLOCKCHAIN DATA & CREATING CONTRACT INSTANCE SECTION-->START ############\n\n  async loadBlockchaindata() {\n    const web3 = window.web3;\n\n    //FETCHING ACCOUNT\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n\n    //GETTING NETWORKID\n    const networkId = await web3.eth.net.getId();\n\n    //CREATING WATEREXCHANGE CONTRACT INSTANCE\n\n    const WaterExchangeData = Waterexchange.networks[networkId];\n    if (WaterExchangeData) {\n      //WATEREXCHANGE INSTANCE\n\n      const waterExchangeinst = new web3.eth.Contract(\n        Waterexchange.abi,\n        WaterExchangeData.address\n      );\n      this.setState({ waterExchangeinst });\n    } else {\n      window.alert(\"Waterexchange contract not deployed to network\");\n    }\n\n    //CREATING WATERSALE CONTRACT INSTANCE\n\n    const WaterSaleData = Sale.networks[networkId];\n    if (WaterSaleData) {\n      const waterSaleinst = new web3.eth.Contract(\n        Sale.abi,\n        WaterSaleData.address\n      );\n      this.setState({ waterSaleinst });\n      this.setState({ watersaleaddr: WaterSaleData.address });\n    } else {\n      window.alert(\"Tokensale contract not deployed to network\");\n    }\n\n    //CREATING TOKEN INSTANCE\n\n    const tokenData = OxidaneToken.networks[networkId];\n    if (tokenData) {\n      const token = new web3.eth.Contract(OxidaneToken.abi, tokenData.address);\n      this.setState({ token });\n    } else {\n      window.alert(\"Token contract not deployed to network\");\n    }\n  }\n\n  //############ LOAD BLOCKCHAIN DATA & CREATING INSTANCE- SECTION-->END ############\n\n  //###################### STATES - SECTION-->START #####################\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      waterExchangeinst: {},\n      waterSaleinst: {},\n      exchangeAddress: \"\",\n      token: {},\n      location: \"\",\n      watersaleaddr: \"\",\n      loading: false,\n      purchaseno: 0,\n      deliverytime: 0,\n      tokenamount: 0,\n      exchangepurchaseno: 0,\n    };\n  }\n\n  //###################### STATES - SECTION-->END #####################\n\n  //##### FRONT-END DATA FETCHING & SMART-CONTRACT FUNCTION INTERACTION - SECTION-->START #######\n\n  //FUNCTION TO Reject delivery\n\n  rejectSubmit = async (event) => {\n    event.preventDefault();\n    var status = await this.state.waterSaleinst.methods\n      .getUserpurchaseStatus(this.state.account, this.state.purchaseno)\n      .call();\n    console.log(status);\n    if (status == \"1\") {\n      //Fetching data from delivery event for rejection\n      await this.state.waterSaleinst.getPastEvents(\n        \"WaterDelivery\",\n        {\n          filter: { globalpurchasenumber: this.state.purchaseno },\n          fromBlock: 0,\n          toBlock: \"latest\",\n        },\n        (err, events) => {\n          console.log(\"====>events\", events);\n          //Fetching deliverytime and Tokenamount\n          let eventvalue = events[0].returnValues;\n          let deliverytime = eventvalue._time;\n          let tokenamount = eventvalue.tokenamount;\n          this.setState({ deliverytime });\n          this.setState({ tokenamount });\n        }\n      );\n      \n      //Fetching Current Timestamp\n      const currenttimestamp = Math.round(new Date().getTime() / 1000);\n      \n      //Calculating difference between prent timestamp and delivery timestamp\n      const timediff = currenttimestamp - this.state.deliverytime;\n      \n      //If difference is more than 3 hours then rejection process continues 648000seconds\n      if (timediff >=648000) {\n        console.log(this.state.exchangeAddress);\n        \n        //Decreasing allowance allocated during water purchase\n        await this.state.token.methods\n          .decreaseAllowance(this.state.exchangeAddress, this.state.tokenamount)\n          .send({ from: this.state.account })\n          .on(\"transactionHash\", (hash) => {\n            this.state.waterSaleinst.methods\n              .rejectdelivery(this.state.purchaseno, this.state.exchangeAddress)\n              .send({ from: this.state.account });\n          });\n      } else {\n        alert(\"You are not allowed to reject before 3 hour\");\n      }\n    }\n    else{\n      alert(\"You are not allowed to reject before delivery\")\n    }\n  };\n\n  \n  // FUNCTION TO HANDLE INPUT\n\n  handleInputChange = async (event) => {\n    event.preventDefault();\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  //##### FRONT-END DATA FETCHING & SMART-CONTRACT FUNCTION INTERACTION - SECTION--->END #######\n\n  // ############## RENDERING SECTION--->START ################\n\n  render() {\n    if (this.state.loading == true) {\n      return <Loader />;\n    } else {\n      return (\n        <div className=\"rejectform container\">\n         <div\n          className=\"card card border-light text-white \"\n          style={{\n            backgroundColor: \"#221f3b\",\n          }}\n        >\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">REJECT DELIVERY</h5>\n              <div className=\"form-group\">\n                <label for=\"exampleInputPassword1\">Exchange Address</label>\n                {/* Fetching Exchange Address */}\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"exampleInputPassword1\"\n                  name=\"exchangeAddress\"\n                  onChange={this.handleInputChange}\n                />\n              </div>\n              {/* Fetching Global Purchase Number */}\n              <div className=\"form-group\">\n                <label for=\"exampleInputPassword1\">Purchase no</label>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  id=\"exampleInputPassword1\"\n                  name=\"purchaseno\"\n                  onChange={this.handleInputChange}\n                />\n              </div>\n              <button\n                type=\"submit\"\n                onClick={this.rejectSubmit}\n                className=\"btn btn-primary\"\n              >\n                Submit\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n// ############## RENDERING SECTION--->END  ################\nexport default Rejectform;\n","import React, { Component } from \"react\";\nimport \"../css/userprofile.css\";\nimport { loadWeb3 } from \"../../functions/helper\";\nimport OxidaneToken from \"../../contracts/OxidaneToken.json\";\nimport TokenSale from \"../../contracts/TokenSale.json\";\nimport { checkethprice } from \"../../API/api\";\nimport Wallet from \"./Tokensale/Wallet\";\nimport BuyToken from \"./Tokensale/BuyToken\";\nimport Exchangelist from \"./Watersale/exchangelist\";\nimport Watersale from \"./Watersale/WaterSalePage\";\nimport Deliverystatus from \"./Watersale/Deliverystatus\";\nimport Rejectform from \"./Watersale/rejectform\";\nimport Kyc from \"../../contracts/Kyc.json\";\nimport Logoutnav from \"../Basic/logoutnav\";\nclass Profilepage extends Component {\n  async componentWillMount() {\n    await loadWeb3();\n    await this.loadBlockchainData();\n\n    //API CALLER FOR FETCHING ETHER PRICE\n    this.interval = setInterval(() => this.oxdPriceFinder(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  //############ LOAD BLOCKCHAIN DATA & CREATING CONTRACT INSTANCE SECTION-->START ############\n\n  async loadBlockchainData() {\n    //WEB3 INSTANCE\n    const web3 = window.web3;\n    //FETCHING ACCOUNT\n\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n\n    //FETCHING ETHERBALANCE\n\n    const ethBalance = await web3.eth.getBalance(this.state.account);\n\n    this.setState({ ethBalance });\n\n    //GETTING NETWORKID\n\n    const networkId = await web3.eth.net.getId();\n\n    //CREATING TOKEN CONTRACT INSTANCE\n\n    const tokenData = OxidaneToken.networks[networkId];\n    if (tokenData) {\n      const token = new web3.eth.Contract(OxidaneToken.abi, tokenData.address);\n      this.setState({ token });\n      //Fetching Token balance\n      let tokenBalance = await token.methods\n        .balanceOf(this.state.account)\n        .call();\n      this.setState({ tokenBalance: tokenBalance.toString() });\n    } else {\n      window.alert(\"Token contract not deployed to network\");\n    }\n\n    //CREATING TOKENSALE CONTRACT INSTANCE\n\n    const tokensaleData = TokenSale.networks[networkId];\n    if (tokensaleData) {\n      const tokensale = new web3.eth.Contract(\n        TokenSale.abi,\n        tokensaleData.address\n      );\n      this.setState({\n        tokenSaleinst: tokensale,\n        tokenSaleAddress: tokensaleData.address,\n      });\n      let tokenRate = await tokensale.methods.rate().call();\n      // console.log(tokenrate);// test-point\n\n      this.setState({ tokenRate });\n    } else {\n      window.alert(\"Tokensale contract not deployed to network\");\n    }\n\n    //CREATING KYC CONTRACT INSTANCE\n    const KycData = Kyc.networks[networkId];\n    if (KycData) {\n      const kycInst = new web3.eth.Contract(Kyc.abi, KycData.address);\n      this.setState({ kycInst });\n      //Fetching customerdetails\n      let customerdetail = await kycInst.methods\n        .registration(this.state.account)\n        .call({ from: this.state.account });\n      //Fetching customer-category and customer number\n      let customercategory = customerdetail.customertcategory;\n      let customernumber = customerdetail.customerno;\n      this.setState({ customercategory });\n      this.setState({ customernumber });\n    } else {\n      window.alert(\"Kyc contract not deployed to network\");\n    }\n  }\n\n  //############ LOAD BLOCKCHAIN DATA & CREATING INSTANCE-SECTION-->END ############\n\n  //##### FRONT-END DATA FETCHING & SMART-CONTRACT FUNCTION INTERACTION - SECTION-->START #######\n\n  //FUNCTION TO CALCULATE TOKEN PRICE\n  oxdPriceFinder = async () => {\n    let price = await checkethprice();\n    // console.log(price);// test-point\n    this.setState({ etherPrice: price });\n    // console.log(this.state.etherprice);// test-point\n    let oxdPrice = (1 / this.state.etherPrice).toFixed(18); //tokenrate is set to 1 dollar for 1 OXD\n    this.setState({ oxdPrice });\n  };\n\n  //FUNCTION TO BUY-TOKENS\n  buyTokens = (tokenAmount, etherAmount, etherprice) => {\n    console.log(etherprice);\n    this.state.tokenSaleinst.methods\n      .buyTokens(\n        tokenAmount,\n        etherprice,\n        this.state.customercategory,\n        this.state.customernumber\n      )\n      .send({ value: etherAmount, from: this.state.account })\n      .on(\"transactionHash\", (hash) => {\n        this.loadBlockchainData();\n      });\n  };\n\n\n  //##### FRONT-END DATA FETCHING & SMART-CONTRACT FUNCTION INTERACTION - SECTION--->END #######\n\n  //###################### STATES - SECTION-->START #####################\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      ethBalance: \"0\",\n      token: {},\n      tokenSaleinst: {},\n      tokenBalance: \"0\",\n      tokenSaleAddress: \"\",\n      etherPrice: \"\",\n      tokenRate: \"\",\n      oxdPrice: \"\",\n      customercategory: 0,\n      kycInst: {},\n      customernumber: 0,\n    };\n  }\n  //###################### STATES - SECTION-->END #####################\n\n  // ############## RENDERING SECTION--->START ################\n  render() {\n    return (\n      <div style={{\n        backgroundColor: '#221f3b',\n       \n      }}>\n        <Logoutnav />\n        <div className=\"wallet container\">\n          <Wallet\n            //passing etherbalance to child component\n            ethBalance={this.state.ethBalance}\n            //passing tokenbalance to child component\n            tokenBalance={this.state.tokenBalance}\n            //passing etherprice to child component\n            ether_to_Dollar_Price={this.state.etherPrice}\n            //passing tokencost to child component\n            oxd_to_Eth_Price={this.state.oxdPrice}\n          />\n        </div>\n        <div className=\"buytoken\">\n          <BuyToken\n            //passing buytoken function to child component\n            buyTokens={this.buyTokens}\n            //passing tokencost to child component\n            oxd_to_Eth_Price={this.state.oxdPrice}\n            //Passing customer number\n            customerno={this.state.customernumber}\n          />\n        </div>\n        <div className=\"exchangelist\">\n          <Exchangelist />\n        </div>\n        <div className=\"watersaleform\">\n        \n          <Watersale\n            //passing customer category to child component\n            customercategory={this.state.customercategory}\n            //Passing customer number\n            customerno={this.state.customernumber}\n          />\n          \n        </div>\n        <div className=\"deliverystatus\">\n          <Deliverystatus customerno={this.state.customernumber} />\n        </div>\n        <div className=\"reject\">\n        <Rejectform />\n        </div>\n      </div>\n    );\n  }\n}\n// ############## RENDERING SECTION--->END  ################\nexport default Profilepage;\n","const fetch = require(\"node-fetch\");\nconst jsdom = require(\"jsdom\");\nexport const loaddamdata = async (damno) => {\n \n  let damAPI = {\n    ChimoniAPI_URL:\n      \"https://cors-anywhere.herokuapp.com/http://idrb.kerala.gov.in/idrb/irrigation_html_disp/main_fr.php?d_cd=12\",\n    ChulliyarAPI_URL:\n      \"https://cors-anywhere.herokuapp.com/http://idrb.kerala.gov.in/idrb/irrigation_html_disp/main_fr.php?d_cd=17\",\n    KalladaAPI_URL:\n      \"https://cors-anywhere.herokuapp.com/http://idrb.kerala.gov.in/idrb/irrigation_html_disp/main_fr.php?d_cd=7\",\n    KanjirapuzhaAPI_URL:\n      \"https://cors-anywhere.herokuapp.com/http://idrb.kerala.gov.in/idrb/irrigation_html_disp/main_fr.php?d_cd=20\",\n    KarapuzhaAPI_URL:\n      \"https://cors-anywhere.herokuapp.com/http://idrb.kerala.gov.in/idrb/irrigation_html_disp/main_fr.php?d_cd=22\",\n    KuttiadyAPI_URL:\n      \"https://cors-anywhere.herokuapp.com/http://idrb.kerala.gov.in/idrb/irrigation_html_disp/main_fr.php?d_cd=6\",\n    MalampuzhaAPI_URL:\n      \"https://cors-anywhere.herokuapp.com/https://cors-anywhere.herokuapp.com/http://idrb.kerala.gov.in/idrb/irrigation_html_disp/main_fr.php?d_cd=1\",\n    MalankaraAPI_URL:\n      \"https://cors-anywhere.herokuapp.com/http://idrb.kerala.gov.in/idrb/irrigation_html_disp/main_fr.php?d_cd=26\",\n    MangalamAPI_URL:\n      \"https://cors-anywhere.herokuapp.com/http://idrb.kerala.gov.in/idrb/irrigation_html_disp/main_fr.php?d_cd=14\",\n    MeenkaraAPI_URL:\n      \"https://cors-anywhere.herokuapp.com/http://idrb.kerala.gov.in/idrb/irrigation_html_disp/main_fr.php?d_cd=16\",\n    MoolatharaAPI_URL:\n      \"https://cors-anywhere.herokuapp.com/http://idrb.kerala.gov.in/idrb/irrigation_html_disp/main_fr.php?d_cd=19\",\n    NeyyarAPI_URL:\n      \"https://cors-anywhere.herokuapp.com/http://idrb.kerala.gov.in/idrb/irrigation_html_disp/main_fr.php?d_cd=4\",\n    PambaAPI_URL:\n      \"https://cors-anywhere.herokuapp.com/http://idrb.kerala.gov.in/idrb/irrigation_html_disp/main_fr.php?d_cd=8\",\n    PazhassiAPI_URL:\n      \"https://cors-anywhere.herokuapp.com/http://idrb.kerala.gov.in/idrb/irrigation_html_disp/main_fr.php?d_cd=5\",\n    PeechiAPI_URL:\n      \"https://cors-anywhere.herokuapp.com/http://idrb.kerala.gov.in/idrb/irrigation_html_disp/main_fr.php?d_cd=13\",\n    PeriyarAPI_URL:\n      \"https://cors-anywhere.herokuapp.com/http://idrb.kerala.gov.in/idrb/irrigation_html_disp/main_fr.php?d_cd=9\",\n    PothundyAPI_URL:\n      \"https://cors-anywhere.herokuapp.com/http://idrb.kerala.gov.in/idrb/irrigation_html_disp/main_fr.php?d_cd=15\",\n    SiruvaniAPI_URL:\n      \"https://cors-anywhere.herokuapp.com/http://idrb.kerala.gov.in/idrb/irrigation_html_disp/main_fr.php?d_cd=21\",\n    VazhaniAPI_URL:\n      \"https://cors-anywhere.herokuapp.com/http://idrb.kerala.gov.in/idrb/irrigation_html_disp/main_fr.php?d_cd=11\",\n    WalayarAPI_URL:\n      \"https://cors-anywhere.herokuapp.com/http://idrb.kerala.gov.in/idrb/irrigation_html_disp/main_fr.php?d_cd=18\",\n  };\n\n  // async function for fetching data from Dam websitesite dom.\n\n  async function damData_async_fetch() {\n    // Fetching chimoni data :\n    //  let ChimoniResponse = await fetch(damAPI.ChimoniAPI_URL);\n    //  let ChimoniData = await ChimoniResponse.text();\n\n    //  // Fetching Chulliyar Data :\n    //  let ChulliyarResponse = await fetch(damAPI.ChulliyarAPI_URL);\n    //  let ChulliyarData = await ChulliyarResponse.text();\n\n    //  // Fetching Kallada Data :\n    //  let KalladaResponse = await fetch(damAPI.KalladaAPI_URL);\n    //  let KalladaData = await KalladaResponse.text();\n\n    //  // Fetching Kanjirapuzha Data :\n    //  let KanjirapuzhaResponse = await fetch(damAPI.KanjirapuzhaAPI_URL);\n    //  let KanjirapuzhaData = await KanjirapuzhaResponse.text();\n\n    //  // Fetching Karapuzha data :\n    //  let KarapuzhaResponse = await fetch(damAPI.KarapuzhaAPI_URL);\n    //  let KarapuzhaData = await KarapuzhaResponse.text();\n\n    // Fetching Kuttiady Data :\n    let KuttiadyResponse = await fetch(damAPI.KuttiadyAPI_URL);\n    let KuttiadyData = await KuttiadyResponse.text();\n\n    // Fetching Malampuzha Data :\n    let MalampuzhaResponse = await fetch(damAPI.MalampuzhaAPI_URL);\n    let MalampuzhaData = await MalampuzhaResponse.text();\n    //   console.log(MalampuzhaResponse)\n    // Fetching Malankara Data :\n    //  let MalankaraResponse = await fetch(damAPI.MalankaraAPI_URL);\n    //  let MalankaraData = await MalankaraResponse.text();\n\n    //   // Fetching Mangalam data :\n    // let MangalamResponse = await fetch(damAPI.MangalamAPI_URL);\n    // let MangalamData = await MangalamResponse.text();\n\n    // // Fetching Meenkara Data :\n    // let MeenkaraResponse = await fetch(damAPI.MeenkaraAPI_URL);\n    // let MeenkaraData = await MeenkaraResponse.text();\n\n    // // Fetching Moolathara Data :\n    // // let MoolatharaResponse = await fetch(damAPI.MoolatharaAPI_URL);\n    // // let MoolatharaData = await MoolatharaResponse.text();\n\n    //Fetching Neyyar Data :\n    let NeyyarResponse = await fetch(damAPI.NeyyarAPI_URL);\n    let NeyyarData = await NeyyarResponse.text();\n\n    //  // Fetching Pamba data :\n    //  let PambaResponse = await fetch(damAPI.PambaAPI_URL);\n    //  let PambaData = await PambaResponse.text();\n\n    //  // Fetching Pazhassi Data :\n    //  let PazhassiResponse = await fetch(damAPI.PazhassiAPI_URL);\n    //  let PazhassiData = await PazhassiResponse.text();\n\n    //  // Fetching Peechi Data :\n    //  let PeechiResponse = await fetch(damAPI.PeechiAPI_URL);\n    //  let PeechiData = await PeechiResponse.text();\n\n    //  // Fetching Periyar Data :\n    //  let PeriyarResponse = await fetch(damAPI.PeriyarAPI_URL);\n    //  let PeriyarData = await PeriyarResponse.text();\n\n    //   // Fetching Pothundy data :\n    // let PothundyResponse = await fetch(damAPI.PothundyAPI_URL);\n    // let PothundyData = await PothundyResponse.text();\n\n    // // Fetching Siruvani Data :\n    // let SiruvaniResponse = await fetch(damAPI.SiruvaniAPI_URL);\n    // let SiruvaniData = await SiruvaniResponse.text();\n\n    // // Fetching Vazhani Data :\n    // let VazhaniResponse = await fetch(damAPI.VazhaniAPI_URL);\n    // let VazhaniData = await VazhaniResponse.text();\n\n    // // Fetching Walayar Data :\n    // let WalayarResponse = await fetch(damAPI.WalayarAPI_URL);\n    // let WalayarData = await WalayarResponse.text();\n\n    return {\n      //         // ChimoniResult : ChimoniData,\n      //         // ChulliyarResult : ChulliyarData,\n      //         // KalladaResult : KalladaData,\n      //         // KanjirapuzhaResult : KanjirapuzhaData,\n      //         // KarapuzhaResult : KarapuzhaData,\n      KuttiadyResult: KuttiadyData,\n      MalampuzhaResult: MalampuzhaData,\n      //         // MalankaraResult : MalankaraData,\n      //         // MangalamResult : MangalamData,\n      //         // MeenkaraResult : MeenkaraData,\n      //                                             // MoolatharaResult : MoolatharaData,\n      NeyyarResult: NeyyarData,\n      //         // PambaResult : PambaData,\n      //         // PazhassiResult :PazhassiData,\n      //         // PeechiResult : PeechiData,\n      //         // PeriyarResult : PeriyarData,\n      //         // PothundyResult : PothundyData,\n      //         // SiruvaniResult : SiruvaniData,\n      //         // VazhaniResult : VazhaniData,\n      //         // WalayarResult : WalayarData\n    };\n  }\n\n  // // Processing on Dom Fetching result\n\n  let a1;\n  //     // Calling async function\n  await damData_async_fetch().then((result) => {\n    //  Storing Rsult in Array\n    let resultArray = [\n      //    result.ChimoniResult,\n      //    result.ChulliyarResult,\n      //    result.KalladaResult,\n      //    result.KanjirapuzhaResult,\n      //    result.KarapuzhaResult,\n      result.KuttiadyResult,\n      result.MalampuzhaResult,\n      //    result.MalankaraResult,\n      //    result.MangalamResult,\n      //    result.MeenkaraResult,\n      result.NeyyarResult,\n      //    result.PambaResult,\n      //    result.PazhassiResult,\n      //    result.PeechiResult,\n      //    result.PeriyarResult,\n      //    result.PothundyResult,\n      //    result.SiruvaniResult,\n      //    result.VazhaniResult,\n      //    result.WalayarResult,\n    ];\n\n    let fetchingDOM = [];\n    // Iterating result through JSDOM\n    for (let i = 0; i < resultArray.length; i++) {\n      fetchingDOM.push(new jsdom.JSDOM(resultArray[i]));\n    }\n\n    //  Storing per day water level\n    let dateWiseWaterLevel = [\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n    ];\n\n    let domlength = [];\n    let calculatedlength = [];\n\n    //  Iterating table data through loop and checking whether last 5 days of data is present or not.\n  \n    for (let i = 0; i < fetchingDOM.length; i++) {\n      domlength.push(\n        fetchingDOM[i].window.document.querySelector(\"table\").rows.length\n      );\n      calculatedlength.push(6 - domlength[i]);\n\n      if (\n        fetchingDOM[i].window.document.querySelector(\"table\").rows.length == 6\n      ) {\n        dateWiseWaterLevel[i].push(\n          parseFloat(\n            fetchingDOM[i].window.document.querySelector(\"table\").rows[1]\n              .cells[2].innerHTML\n          )\n        );\n      } else {\n        for (let r = 1; r <= 1; r++) {\n          dateWiseWaterLevel[i].push(\n            parseFloat(\n              fetchingDOM[i].window.document.querySelector(\"table\").rows[1]\n                .cells[2].innerHTML\n            )\n          );\n        }\n      }\n    }\n\n    // Fetching FRL \n\n    let FRLdata = [\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n      [],\n    ];\n//Fetching FRL \n    for (let j = 1; j < 2; j++) {\n      for (let i = 0; i < fetchingDOM.length; i++) {\n        let FRL = fetchingDOM[i].window.document.querySelectorAll(\"label\")[4]\n          .innerHTML;\n\n        FRLdata[i].push(parseFloat(FRL.slice(1, -1)));\n      }\n    }\n\n    console.log(dateWiseWaterLevel[damno]);\n    console.log(FRLdata[damno]);\n    \n   //Dam waterlevel percentage\n    let percentage = (dateWiseWaterLevel[damno] / FRLdata[damno]) * 100;\n    a1 = percentage;\n  });\n\n  return a1;\n};\n","import React, { Component } from \"react\";\nimport \"../css/exchangewallet.css\";\nclass ExchangeWallet extends Component {\n  //###################### STATES - SECTION-->START #####################\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  //###################### STATES - SECTION-->END #####################\n\n  // ############## RENDERING SECTION--->START ################\n  render() {\n    return (\n      <div className=\"exchangewallet\">\n        <div className=\"container\">\n          <div\n            className=\"card card border-light text-white \"\n            style={{\n              backgroundColor: \"#221f3b\",\n            }}\n          >\n            <div className=\"card-header\">MY OXD BALANCE</div>\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">OXD</h5>\n              <h5 className=\"card-title\">{this.props.tokenBalance}</h5>\n            </div>\n          </div>\n          <div\n            className=\"card card border-light text-white \"\n            style={{\n              backgroundColor: \"#221f3b\",\n            }}\n          >\n            <div className=\"card-header\">DRINKING WATER BALANCE</div>\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">LITRES</h5>\n              <h5 className=\"card-title\">{this.props.DrinkingwaterBalance}</h5>\n            </div>\n          </div>\n\n          <div\n            className=\"card card border-light text-white \"\n            style={{\n              backgroundColor: \"#221f3b\",\n            }}\n          >\n            <div className=\"card-header\">NON DRINKING WATER BALANCE</div>\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">LITRES</h5>\n              <h5 className=\"card-title\">\n                {this.props.NonDrinkingwaterBalance}\n              </h5>\n            </div>\n          </div>\n\n          <div\n            className=\"card card border-light text-white \"\n            style={{\n              backgroundColor: \"#221f3b\",\n            }}\n          >\n            <div className=\"card-header\">DRINKING WATER RATE</div>\n            <div className=\"card-body\">\n              <h5 className=\"\">INDIVIDUAL RATE</h5>\n              <h5 className=\"\">{this.props.DrinkingwaterRate}</h5>\n              <h5 className=\"\">INDUSTRY RATE</h5>\n              <h5 className=\"\">{this.props.IndustryDrinkingRate}</h5>\n            </div>\n          </div>\n\n          <div\n            className=\"card card border-light text-white \"\n            style={{\n              backgroundColor: \"#221f3b\",\n            }}\n          >\n            <div className=\"card-header\">NON DRINKING WATER RATE</div>\n            <div className=\"card-body\">\n              <h5 className=\"\">INDIVIDUAL RATE</h5>\n              <h5 className=\"\">{this.props.NonDrinkingwaterRate}</h5>\n              <h5 className=\"\">INDUSTRY RATE</h5>\n              <h5 className=\"\">{this.props.IndustryNonDrinkingRate}</h5>\n            </div>\n          </div>\n\n          <div\n            className=\"card card border-light text-white \"\n            style={{\n              backgroundColor: \"#221f3b\",\n            }}\n          >\n            <div className=\"card-header\">DELIVERY CHARGE</div>\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">OXD</h5>\n              <h5 className=\"card-title\">{this.props.DeliveryCharge}</h5>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n// ############## RENDERING SECTION--->END  ################\nexport default ExchangeWallet;\n","import React, { Component } from \"react\";\nimport \"../css/waterexchangeprof.css\";\nimport { loadWeb3 } from \"../../functions/helper\";\nimport OxidaneToken from \"../../contracts/OxidaneToken.json\";\nimport Waterexchange from \"../../contracts/Waterexchange.json\";\nimport TokenSale from \"../../contracts/TokenSale.json\";\nimport { checkethprice } from \"../../API/api\";\nimport Loader from \"../Basic/Loader\";\nclass Tokensale extends Component {\n  async componentWillMount() {\n    await loadWeb3();\n    await this.loadBlockchaindata();\n    await this.oxdsellPriceFinder();\n  }\n\n  //############ LOAD BLOCKCHAIN DATA & CREATING CONTRACT INSTANCE SECTION-->START ############\n\n  async loadBlockchaindata() {\n    // WEB3 INSTANCE\n    const web3 = window.web3;\n\n    // FETCHING ACCOUNT\n\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n\n    //GETTING NETWORKID\n\n    const networkId = await web3.eth.net.getId();\n\n    //CREATING WATEREXHANGE CONTRACT INSTANCE\n\n    const WaterExchangeData = Waterexchange.networks[networkId];\n    if (WaterExchangeData) {\n      const waterExchangeinst = new web3.eth.Contract(\n        Waterexchange.abi,\n        WaterExchangeData.address\n      );\n      this.setState({ waterExchangeinst });\n    } else {\n      window.alert(\"waterexchange contract not deployed to network\");\n    }\n\n    //CREATING TOKEN CONTRACT INSTANCE\n\n    const tokenData = OxidaneToken.networks[networkId];\n    if (tokenData) {\n      const token = new web3.eth.Contract(OxidaneToken.abi, tokenData.address);\n      this.setState({ token });\n      //Fetching token balance\n      let tokenBalance = await token.methods\n        .balanceOf(this.state.account)\n        .call();\n      this.setState({ tokenBalance });\n    } else {\n      window.alert(\"Token contract not deployed to network\");\n    }\n\n    //CREATING TOKEN-SALE CONTRACT INSTANCE\n    const tokensaleData = TokenSale.networks[networkId];\n    if (tokensaleData) {\n      const tokensale = new web3.eth.Contract(\n        TokenSale.abi,\n        tokensaleData.address\n      );\n      this.setState({\n        tokenSaleinst: tokensale,\n        tokenSaleAddress: tokensaleData.address,\n      });\n      //Fetching total sum of etherprices at which customers bought water\n      var totalethprice = await tokensale.methods.etherpricesum().call();\n      // console.log(totalethprice);//test-point\n      //Converting from wei to ether\n      var totalweiethprice = web3.utils.fromWei(totalethprice, \"ether\");\n      //Fetching Totalnumber of water purchase\n      const totaltokenpurchaseno = await tokensale.methods\n        .tokenpurchasenumber()\n        .call();\n      // console.log(totaltokenpurchaseno);\n      // console.log(totalweiethprice);//test-point\n      // calculating avg token price on which customer bought tokens\n      let avgtokenrate = totalweiethprice / totaltokenpurchaseno;\n      // console.log(avgtokenrate);//test-point\n      //if avgtokenrate is not an number(For initial token sale if total ethsum and number of purchase is zero)\n      if (isNaN(avgtokenrate)) {\n        //then avg rate is set to zero\n        this.setState({\n          avgtokenrate: 0,\n        });\n      } else {\n        this.setState({\n          avgtokenrate,\n        });\n      }\n      // console.log(this.state.avgtokenrate);//test-point\n    } else {\n      window.alert(\"Tokensale contract not deployed to network\");\n    }\n    //FETCHING TOKEN-ETHER RATE\n\n    let tokenRate = await this.state.tokenSaleinst.methods.rate().call();\n    // console.log(tokenrate);// test-point\n\n    this.setState({ tokenRate });\n  }\n\n  oxdsellPriceFinder = async () => {\n    //Fetching Current Ether-price\n    let price = await checkethprice();\n    // console.log(price);// test-point\n    this.setState({ etherPrice: price });\n    // console.log(price);//test-point\n    // console.log(this.state.tokenRate);//test-point\n    // console.log(this.state.etherprice);// test-point\n    //calculating current token-price with current Etherprice\n    let oxdPrice = 1 / (this.state.etherPrice / this.state.tokenRate); //tokenrate is set to 1 dollar for 1 OXD\n    this.setState({ oxdPrice });\n    console.log(this.state.oxdPrice);\n    //if current averagetoken price is zero then selling rate will be current oxd rate\n    if (this.state.avgtokenrate === 0) {\n      this.setState({ sellingrate: this.state.oxdPrice });\n    } else {\n      //if current averagetoken price is greater than current token price then selling rate will be current oxd rate\n      if (this.state.avgtokenrate > this.state.oxdPrice) {\n        this.setState({ sellingrate: this.state.oxdPrice });\n      } else {\n        //if current averagetoken price is less than current token price then selling rate will be average rate\n        this.setState({ sellingrate: this.state.avgtokenrate });\n      }\n    }\n    // console.log(this.state.avgtokenrate);//test-point\n  };\n\n  //############ LOAD BLOCKCHAIN DATA & CREATING INSTANCE- SECTION-->END ############\n\n  //###################### STATES - SECTION-->START #####################\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      loading: false,\n      waterExchangeinst: {},\n      exchangeAddress: \"\",\n      waterSaleinst: {},\n      tokenBalance: 0,\n      etherPrice: 0,\n      avgtokenrate: 0,\n      sellingrate: 0,\n      oxdPrice: 0,\n      tokenSaleinst: \"\",\n      tokenSaleAddress: \"\",\n      tokenRate: 0,\n    };\n  }\n\n  //###################### STATES - SECTION-->END #####################\n\n  //##### FRONT-END DATA FETCHING & SMART-CONTRACT FUNCTION INTERACTION - SECTION-->START #######\n\n  // FUNCTION TO HANDLE INPUT\n  handleInputChange = (event) => {\n    event.preventDefault();\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n  //Function for triggering Token sale\n  sellTokens =async (tokenAmount, etheramount) => {\n    this.setState({ loading: true });\n    //Approving tokens from waterexchange\n    await this.state.token.methods\n      .approve(this.state.tokenSaleAddress, tokenAmount)\n      .send({ from: this.state.account })\n      .on(\"transactionHash\", (hash) => {\n        //Transfering Tokens from Exchange to Oxidane & receiving ether amount\n        this.state.tokenSaleinst.methods\n          .sellTokens(tokenAmount, etheramount)\n          .send({ from: this.state.account })\n          .on(\"transactionHash\", (hash) => {\n            this.setState({ loading: false });\n          });\n      });\n  };\n\n  //##### FRONT-END DATA FETCHING & SMART-CONTRACT FUNCTION INTERACTION - SECTION--->END #######\n\n  // ############## RENDERING SECTION--->START ################\n  render() {\n    if (this.state.loading === true) {\n      return (\n        <div>\n          <Loader />\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"tokensale\">\n            <div className=\"card card border-light text-white \"style={{\n          backgroundColor: '#221f3b',\n          \n        }}>\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">SellTokens</h5>\n              <h5 className=\"card-title\">TokenRate:-{this.state.sellingrate}</h5>\n              <form\n                onSubmit={(event) => {\n                  event.preventDefault();\n                  let tokenAmount;\n                  let ether;\n                  // Fetching token amount\n                  tokenAmount = this.input.value;\n                  ether = this.state.etherAmount.toString();\n                  ether = window.web3.utils.toWei(ether, \"Ether\");\n                  //Triggering sell Function\n                  this.sellTokens(tokenAmount, ether);\n                  this.input.value = \"\";\n                  this.setState({ etherAmount: \"\" });\n                }}\n              >\n                <div className=\"form-group \">\n                  <label className=\"text-black\" for=\"exampleInputEmail1\">\n                    Token Amount\n                  </label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    required\n                    id=\"exampleInputEmail1\"\n                    onChange={(event) => {\n                      const tokenAmount = this.input.value.toString();\n                      this.setState({\n                        //CALCULATED SELLING RATE\n                        etherAmount: this.state.sellingrate * tokenAmount,\n                      });\n                    }}\n                    ref={(input) => {\n                      this.input = input;\n                    }}\n                  />\n                </div>\n                {/* Displaying Etherprice */}\n                <div className=\"form-group\">\n                  <label for=\"exampleInputPassword1\">ETHER PRICE</label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"exampleInputPassword1\"\n                    value={this.state.etherAmount}\n                  />\n                </div>\n                <button type=\"submit\" class=\"btn btn-primary\">\n                  Submit\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\n// ############## RENDERING SECTION--->END  ################\nexport default Tokensale;\n","import React, { Component } from \"react\";\nclass slowLoader extends Component {\n  state = {};\n  render() {\n    return (\n      <div style={{ backgroundColor: '#221f3b',height:\"1000px\"}}>\n      <div className=\"text-center \" style={{position:\"relative\",top:\"300px\"}}>\n        <h1 className=\"text-white\">Please Wait.. This may take some time.Fetching Dam Waterlevel Data From IDRB </h1>\n    <div class=\"spinner-grow text-danger\" style={{width: \"3rem\", height: \"3rem\"}} role=\"status\">\n      <span class=\"sr-only\">Loading...</span>\n    </div>\n    <div class=\"spinner-grow text-success\" style={{width: \"3rem\", height: \"3rem\"}} role=\"status\">\n      <span class=\"sr-only\">Loading...</span>\n    </div>\n    <div class=\"spinner-grow text-info\" style={{width: \"3rem\", height: \"3rem\"}} role=\"status\">\n      <span class=\"sr-only\">Loading...</span>\n    </div>\n    </div>\n    </div>\n    );\n  }\n}\n\nexport default slowLoader;","import React, { Component } from \"react\";\nimport \"../css/waterexchangeprof.css\";\nimport { loadWeb3 } from \"../../functions/helper\";\nimport OxidaneToken from \"../../contracts/OxidaneToken.json\";\nimport Waterexchange from \"../../contracts/Waterexchange.json\";\nimport Sale from \"../../contracts/Watersale.json\";\nimport { loaddamdata } from \"../../API/damwaterlevelfinder\";\nimport Exchangewallet from \"./exchangewallet\";\nimport Tokensale from \"./tokensale\";\nimport Slowloader from \"../Basic/slowloader\";\nimport Logoutnav from \"../Basic/logoutnav\";\nconst crypto = require(\"crypto\");\nclass Exchangeprofile extends Component {\n  async componentWillMount() {\n    await loadWeb3();\n    await this.loadBlockchaindata();\n    await this.loaddamdata();\n  }\n\n  //############ LOAD BLOCKCHAIN DATA & CREATING CONTRACT INSTANCE SECTION-->START ############\n\n  async loadBlockchaindata() {\n    // WEB3 INSTANCE\n    const web3 = window.web3;\n\n    // FETCHING ACCOUNT\n\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n\n    //GETTING NETWORKID\n\n    const networkId = await web3.eth.net.getId();\n\n    //CREATING WATEREXHANGE CONTRACT INSTANCE\n\n    const WaterExchangeData = Waterexchange.networks[networkId];\n    if (WaterExchangeData) {\n      const waterExchangeinst = new web3.eth.Contract(\n        Waterexchange.abi,\n        WaterExchangeData.address\n      );\n      this.setState({ waterExchangeinst });\n\n      //Fetching Exchange Details\n\n      const exchange = await waterExchangeinst.methods\n        .localExchange(this.state.account)\n        .call();\n      //Fetching Drinking water Balance\n      const drinkingWaterBalance = exchange.drinkingWaterquantity;\n      //Fetching NonDrinking water Balance\n      const nonDrinkingwaterBalance = exchange.nonDrinkingwaterQuantity;\n      //Fetching cluster\n      const cluster = exchange.region;\n      console.log(cluster);\n      //storing cluster\n      this.setState({ cluster });\n      console.log(cluster);\n      //Fetching Delivery charge\n      const tokencharge = await waterExchangeinst.methods\n        .localExchangetokenrate(this.state.account)\n        .call();\n      const deliveryCharge = tokencharge.deliverycharge;\n      //storing Drinking water Balance\n      this.setState({ drinkingWaterBalance });\n      //storing Drinking water Balance\n      this.setState({ nonDrinkingwaterBalance });\n      //storing Delivery charge\n      this.setState({ deliveryCharge });\n    } else {\n      window.alert(\"waterexchange contract not deployed to network\");\n    }\n\n    //CREATING TOKEN CONTRACT INSTANCE\n\n    const tokenData = OxidaneToken.networks[networkId];\n    if (tokenData) {\n      const token = new web3.eth.Contract(OxidaneToken.abi, tokenData.address);\n      this.setState({ token });\n      //Fetching Token balance\n      let tokenBalance = await token.methods\n        .balanceOf(this.state.account)\n        .call();\n      this.setState({ tokenBalance: tokenBalance.toString() });\n    } else {\n      window.alert(\"Token contract not deployed to network\");\n    }\n\n    //CREATING WATERSALE CONTRACT INSTANCE\n\n    const WaterSaleData = Sale.networks[networkId];\n    if (WaterSaleData) {\n      const waterSaleinst = new web3.eth.Contract(\n        Sale.abi,\n        WaterSaleData.address\n      );\n      this.setState({ waterSaleinst });\n      this.setState({pendinglist:[]})\n      this.setState({rejectlist:[]})\n      //Fetching Total Purchase Number\n      const purchasenumber = await waterSaleinst.methods\n        .purchaseNumber(this.state.account)\n        .call();\n      console.log(purchasenumber);\n      //Fetching Total Delivery Number\n      const deliverynumber = await waterSaleinst.methods\n        .deliveryNumber(this.state.account)\n        .call();\n      //Iterating through each purchase number to fetch details\n      for (let i = deliverynumber; i <= purchasenumber; i++) {\n        const pending = await waterSaleinst.methods\n          .getExchangepurchaseDetails(this.state.account, i)\n          .call();\n        console.log(pending);\n        //Fetching status of each purchase number\n        const state = pending.status;\n        console.log(state);\n        //If state is in paid state\n        if (state === \"0\") {\n          //Fetching Details From WaterPurchase event\n          await this.state.waterSaleinst.getPastEvents(\n            \"WaterPurchase\",\n            {\n              filter: {\n                exchangeaddr: this.state.account,\n                _purchaseNumber: i,\n              },\n              fromBlock: 0,\n              toBlock: \"latest\",\n            },\n            (err, events) => {\n              console.log(\"====>events\", events);\n              for (var n = 0; n <= events.length - 1; n++) {\n                let pendingarray = events[n].returnValues;\n                //storing details in pending list array\n                this.setState({\n                  pendinglist: [...this.state.pendinglist, pendingarray],\n                });\n              }\n            }\n          );\n        }\n        //Fetching Reject Details From WaterPurchase event\n        if (state === \"3\") {\n          await this.state.waterSaleinst.getPastEvents(\n            \"DeliveryRejection\",\n            {\n              filter: {\n                exchangeaddr: this.state.account,\n              },\n              fromBlock: 0,\n              toBlock: \"latest\",\n            },\n            (err, events) => {\n              console.log(\"====>events\", events);\n              for (var m = 0; m <= events.length - 1; m++) {\n                let rejectarray = events[m].returnValues;\n                //storing details in pending list array\n                this.setState({\n                  rejectlist: [...this.state.rejectlist, rejectarray],\n                });\n              }\n            }\n          );\n        }\n      }\n    } else {\n      window.alert(\"Tokensale contract not deployed to network\");\n    }\n  }\n  //Function To Fetch Dam waterlevel and to calculate rate of water\n  async loaddamdata() {\n    this.setState({ loading: true });\n    try {\n      //Fetching Dam water level Percentage\n      const damwaterlevelrawdata = await loaddamdata(this.state.cluster);\n      // console.log(damwaterlevelrawdata);//test-point\n      const damwaterleveldata = parseInt(damwaterlevelrawdata);\n      console.log(damwaterleveldata); //test-point\n\n      //Fetching individual category rate of Drinking water from Smart Contract by providing dam water level percentage\n      const drinkingWaterrate = await this.state.waterExchangeinst.methods\n        .ratecalculator(damwaterleveldata, 0, 0)\n        .call();\n\n      //Fetching individual category rate of Non-Drinking water from Smart Contract by providing dam water level percentage\n      const nonDrinkingwaterRate = await this.state.waterExchangeinst.methods\n        .ratecalculator(damwaterleveldata, 1, 0)\n        .call();\n\n      //Fetching Industry category rate of Drinking water from Smart Contract by providing dam water level percentage\n      const industrydrinkingWaterrate = await this.state.waterExchangeinst.methods\n        .ratecalculator(damwaterleveldata, 0, 1)\n        .call();\n      // console.log(industrydrinkingWaterrate);//test-point\n\n      //Fetching Industry category rate of Non-Drinking water from Smart Contract by providing dam water level percentage\n      const industrynondrinkingWaterrate = await this.state.waterExchangeinst.methods\n        .ratecalculator(damwaterleveldata, 1, 1)\n        .call();\n      this.setState({ damwaterleveldata });\n      this.setState({ drinkingWaterrate });\n      this.setState({ nonDrinkingwaterRate });\n      this.setState({ industrydrinkingWaterrate });\n      this.setState({ industrynondrinkingWaterrate });\n    } catch (\n      err //If dam water level data is not available due to some error then avg rate is used(90% waterlevel)\n    ) {\n      //Fetching individual category rate of Drinking water from Smart Contract by providing dam water level percentage\n      const drinkingWaterrate = await this.state.waterExchangeinst.methods\n        .ratecalculator(90, 0, 0)\n        .call();\n\n      //Fetching individual category rate of Non-Drinking water from Smart Contract by providing dam water level percentage\n      const nonDrinkingwaterRate = await this.state.waterExchangeinst.methods\n        .ratecalculator(90, 1, 0)\n        .call();\n      //Fetching Industry category rate of Drinking water from Smart Contract by providing dam water level percentage\n      const industrydrinkingWaterrate = await this.state.waterExchangeinst.methods.ratecalculator(\n        90,\n        0,\n        1\n      );\n      //Fetching Industry category rate of Non-Drinking water from Smart Contract by providing dam water level percentage\n      const industrynondrinkingWaterrate = await this.state.waterExchangeinst.methods.ratecalculator(\n        90,\n        1,\n        1\n      );\n      this.setState({ drinkingWaterrate });\n      this.setState({ nonDrinkingwaterRate });\n      this.setState({ industrydrinkingWaterrate });\n      this.setState({ industrynondrinkingWaterrate });\n    }\n    this.setState({ loading: false });\n  }\n\n  //############ LOAD BLOCKCHAIN DATA & CREATING INSTANCE- SECTION-->END ############\n\n  //###################### STATES - SECTION-->START #####################\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      loading: false,\n      registered: false,\n      waterExchangeinst: {},\n      exchangeAddress: \"\",\n      mintAmount: 0,\n      waterBalance: 0,\n      waterSaleinst: {},\n      pendinglist: [],\n      rejectlist: [],\n      tokenBalance: 0,\n      waterType: 0,\n      drinkingWaterBalance: 0,\n      nonDrinkingwaterBalance: 0,\n      deliveryCharge: 0,\n      damwaterleveldata: 0,\n      drinkingWaterrate: 0,\n      nonDrinkingwaterRate: 0,\n      cluster: 0,\n      industrynondrinkingWaterrate: 0,\n      industrydrinkingWaterrate: 0,\n    };\n  }\n\n  //###################### STATES - SECTION-->END #####################\n\n  //##### FRONT-END DATA FETCHING & SMART-CONTRACT FUNCTION INTERACTION - SECTION-->START #######\n\n  //FUNCTION TO SUBMIT DATA\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    //TO INCREMENT WATERBALANCE IN WATEREXCHANGE\n\n    this.state.waterExchangeinst.methods\n      .incrementWater(\n        this.state.mintAmount,\n        this.state.waterType,\n        this.state.damwaterleveldata\n      )\n      .send({ from: this.state.account })\n      .on(\"transactionHash\", (hash) => {\n        this.loadBlockchaindata();\n      });\n  };\n\n  // FUNCTION TO HANDLE INPUT\n  handleInputChange = (event) => {\n    event.preventDefault();\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  //Function to trigger Delivery\n  triggerdelivery = async (event) => {\n    event.preventDefault();\n    //Fetching Current Timestamp\n    let timestamp = Math.round(new Date().getTime() / 1000);\n    //Triggering Delivery\n    await this.state.waterSaleinst.methods\n      .triggerDelivery(event.currentTarget.value, timestamp)\n      .send({ from: this.state.account });\n    this.setState({ pendinglist: [] });\n    this.loadBlockchaindata();\n  };\n\n  //Function to update Delivery Charge\n  updateDeliverycharge = async (event) => {\n    event.preventDefault();\n    await this.state.waterExchangeinst.methods\n      .deliverycharge(this.state.deliveryCharge)\n      .send({ from: this.state.account })\n      .on(\"transactionHash\", (hash) => {\n        this.loadBlockchaindata();\n      });\n  };\n  //##### FRONT-END DATA FETCHING & SMART-CONTRACT FUNCTION INTERACTION - SECTION--->END #######\n\n  // ############## RENDERING SECTION--->START ################\n  render() {\n    if (this.state.loading === true) {\n      return (\n        <div>\n          <Slowloader />\n        </div>\n      );\n    } else {\n      return (\n        <div\n          style={{\n            backgroundColor: \"#221f3b\",\n          }}\n        >\n          <Logoutnav />\n          <div>\n            <Exchangewallet\n              tokenBalance={this.state.tokenBalance}\n              DrinkingwaterBalance={this.state.drinkingWaterBalance}\n              NonDrinkingwaterBalance={this.state.nonDrinkingwaterBalance}\n              DrinkingwaterRate={this.state.drinkingWaterrate}\n              NonDrinkingwaterRate={this.state.nonDrinkingwaterRate}\n              DeliveryCharge={this.state.deliveryCharge}\n              IndustryDrinkingRate={this.state.industrydrinkingWaterrate}\n              IndustryNonDrinkingRate={this.state.industrynondrinkingWaterrate}\n            />\n            <div className=\"\">\n              <div className=\"mintform container\">\n                <div\n                  className=\"card card border-light text-white \"\n                  style={{\n                    backgroundColor: \"#221f3b\",\n                  }}\n                >\n                  <div class=\"card-body\">\n                    <h5 class=\"card-title\">Update Water</h5>\n                    <form\n                      onSubmit={this.handleSubmit}\n                      encType=\"multipart/form-data\"\n                    >\n                      {/* Fetching watertype */}\n                      <div class=\"form-group\">\n                        <label for=\"exampleFormControlSelect1\">\n                          Select Water Type\n                        </label>\n                        <select\n                          class=\"form-control\"\n                          id=\"exampleFormControlSelect1\"\n                          name=\"waterType\"\n                          onChange={this.handleInputChange}\n                        >\n                          <option value=\"0\">Drinking</option>\n                          <option value=\"1\">Non Drinking</option>\n                        </select>\n                      </div>\n                      {/* Fetching Waterquantity */}\n                      <div class=\"form-group \">\n                        <label className=\"text-black\" for=\"exampleInputEmail1\">\n                          Amount to Increment(in kl )\n                        </label>\n                        <input\n                          name=\"mintAmount\"\n                          type=\"number\"\n                          required\n                          onChange={this.handleInputChange}\n                        />\n                      </div>\n                      <button type=\"submit\" class=\"btn btn-success\">\n                        Add water\n                      </button>\n                    </form>\n\n                    {/* Fetching Delivery Charge */}\n                    <label className=\"text-black\" for=\"exampleInputEmail1\">\n                      Update Delivery charge\n                    </label>\n                    <input\n                      name=\"deliveryCharge\"\n                      type=\"number\"\n                      required\n                      onChange={this.handleInputChange}\n                    />\n                    <button\n                      type=\"submit\"\n                      class=\"btn btn-success\"\n                      onClick={this.updateDeliverycharge}\n                    >\n                      Update\n                    </button>\n                  </div>\n                </div>\n              </div>\n              <div className=\"sale container\">\n                <Tokensale />\n              </div>\n              {/* Displaying Pending list */}\n              <div className=\"pendingtable container\">\n                <div\n                  className=\"card card border-danger text-white \"\n                  style={{\n                    backgroundColor: \"#221f3b\",\n                  }}\n                >\n                  <div className=\"card-body\">\n                    <h5 className=\"card-title\">DELIVERY PENDING LIST</h5>\n                    <table class=\"table table-bordered text-white\">\n                      <thead className=\"thead-dark\">\n                        <tr>\n                          <th scope=\"col\">Customer No</th>\n                          <th scope=\"col\">Purchaseno</th>\n                          <th scope=\"col\">Quantity</th>\n                          <th scope=\"col\">Delivery location</th>\n                          <th scope=\"col\">Contact no</th>\n                          <th scope=\"col\">Watertype</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {this.state.pendinglist.map((ex, key) => {\n                          // decrypting Mobile no\n                          var mykey1 = crypto.createDecipher(\n                            \"aes-128-cbc\",\n                            \"mypassword\"\n                          );\n                          var mystr1 = mykey1.update(ex.phoneno, \"hex\", \"utf8\");\n                          mystr1 += mykey1.final(\"utf8\");\n                          var a;\n                          if (ex.watertype == 0) {\n                            a = \"Drinking\";\n                          } else {\n                            a = \"Non-Drinking\";\n                          }\n                          return (\n                            <tr>\n                              <td>{ex.customerno}</td>\n                              <td>{ex._purchaseNumber}</td>\n                              <td>{ex._quantity}</td>\n                              <td>{ex._deliverylocation}</td>\n                              <td>{mystr1}</td>\n                              <td>{a}</td>\n                              <button\n                                class=\"btn btn-success\"\n                                type=\"submit\"\n                                value={ex._purchaseNumber}\n                                id={a}\n                                onClick={this.triggerdelivery}\n                              >\n                                Deliver\n                              </button>\n                            </tr>\n                          );\n                        })}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n                <div\n                  className=\"card card border-danger text-white \"\n                  style={{\n                    backgroundColor: \"#221f3b\",\n                  }}\n                >\n                  <div className=\"card-body\">\n                    <h5 className=\"card-title\">DELIVERY REJECTED LIST</h5>\n                    <table class=\"table table-bordered text-white\">\n                      <thead>\n                        <tr>\n                          <th scope=\"col\">Global Purchase Number</th>\n                          <th scope=\"col\">Time</th>\n                          <th scope=\"col\">Customer Address</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {this.state.rejectlist.map((ex, key) => {\n                          return (\n                            <tr>\n                              <td>{ex.globalpurchasenumber}</td>\n                              <td>{ex._time}</td>\n                              <td>{ex.customer}</td>\n                            </tr>\n                          );\n                        })}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\n// ############## RENDERING SECTION--->END  ################\nexport default Exchangeprofile;\n","import React, { Component } from \"react\";\nimport M from \"materialize-css\";\nimport { loadWeb3 } from \"../../../functions/helper\";\nimport { Redirect } from \"react-router-dom\";\nimport Kyc from \"../../../contracts/Kyc.json\";\nimport \"../../css/signup.css\";\nimport ParticlesBg from \"particles-bg\";\nclass Signup extends Component {\n  async componentWillMount() {\n    await loadWeb3();\n    await this.loadBlockchaindata();\n    await this.authenticate();\n  }\n\n  //############ LOAD BLOCKCHAIN DATA & CREATING CONTRACT INSTANCE SECTION-->START ############\n\n  async loadBlockchaindata() {\n    //creating web3 instance\n    const web3 = window.web3;\n    //FETCHING ACCOUNT\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n\n    //GETTING NETWORKID\n    const networkId = await web3.eth.net.getId();\n\n    //CREATING KYC CONTRACT INSTANCE\n    const KycData = Kyc.networks[networkId];\n    if (KycData) {\n      const kycInst = new web3.eth.Contract(Kyc.abi, KycData.address);\n      this.setState({ kycInst });\n    }\n    await this.authenticate();\n  }\n\n  //############ LOAD BLOCKCHAIN DATA & CREATING INSTANCE- SECTION-->END ############\n\n  //##### FRONT-END DATA FETCHING & SMART-CONTRACT FUNCTION INTERACTION - SECTION-->START #######\n\n  //FUNCTION TO HANDLE SUBMIT DATA\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    await this.setCustomer(this.state.category);\n    await this.loadBlockchaindata();\n  };\n\n  // FUNCTION TO HANDLE INPUT DATA\n  handleInputChange = (event) => {\n    event.preventDefault();\n    //storing input\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // FUNCTION TO AUTHENTICATE USER\n  authenticate = async () => {\n    let kycaddr = await this.state.kycInst.methods\n      .registration(this.state.account)\n      .call();\n    //checking whether exchange is registered\n    if (kycaddr.acountno === this.state.account) {\n      this.setState({ registered: true });\n    }\n  };\n\n  // FUNCTION TO REGISTER USER\n  setCustomer = async (category) => {\n    await this.state.kycInst.methods\n      .signup(category)\n      .send({ from: this.state.account })\n      .on(\"transactionHash\", (hash) => {\n        this.loadBlockchaindata();\n      });\n  };\n  //##### FRONT-END DATA FETCHING & SMART-CONTRACT FUNCTION INTERACTION - SECTION--->END #######\n\n  //###################### STATES - SECTION-->START #####################\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      kycInst: {},\n      registered: false,\n      name: \"\",\n      category: 0,\n    };\n  }\n  //###################### STATES - SECTION-->END #####################\n\n  // ############## RENDERING SECTION--->START ################\n  render() {\n    if (this.state.registered) {\n      // if registered then redirects to userprofilepage else to signup page\n      return <Redirect to=\"/profilepage\" />;\n    } else {\n      return (\n        <div>\n          <div className=\"signup container\">\n            <div className=\"card bg-light mb-3\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">Signup</h5>\n                <form>\n                  {/* Fetching user category */}\n                  <div className=\"form-group\">\n                    <label for=\"exampleFormControlSelect1\">\n                      Select Category\n                    </label>\n                    <select\n                      className=\"form-control\"\n                      id=\"exampleFormControlSelect1\"\n                      name=\"category\"\n                      onChange={this.handleInputChange}\n                    >\n                      <option>Select Category</option>\n                      <option value=\"0\">Individual</option>\n                      <option value=\"1\">Industry</option>\n                    </select>\n                  </div>\n                  <button\n                    type=\"submit\"\n                    class=\"btn btn-primary\"\n                    onClick={this.handleSubmit}\n                  >\n                    Register\n                  </button>\n                </form>\n              </div>\n            </div>\n          </div>\n          <ParticlesBg type=\"square\" color=\"#1a237e\" bg={true} />\n        </div>\n      );\n    }\n  }\n}\n// ############## RENDERING SECTION--->END  ################\nexport default Signup;\n","import React, { Component } from \"react\";\nimport { loadWeb3 } from \"../../functions/helper\";\nimport Waterexchangeprof from \"../Exchange/WaterExchangeProfile\";\nimport Waterexchange from \"../../contracts/Waterexchange.json\";\nclass Exchangesignup extends Component {\n  async componentWillMount() {\n    await loadWeb3();\n    await this.loadBlockchaindata();\n  }\n  //############ LOAD BLOCKCHAIN DATA & CREATING CONTRACT INSTANCE SECTION-->START ############\n  async loadBlockchaindata() {\n    // WEB3 INSTANCE\n    const web3 = window.web3;\n\n    // FETCHING ACCOUNT\n\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n\n    //GETTING NETWORKID\n\n    const networkId = await web3.eth.net.getId();\n\n    //CREATING WATEREXHANGE CONTRACT INSTANCE\n\n    const WaterExchangeData = Waterexchange.networks[networkId];\n    if (WaterExchangeData) {\n      const waterExchangeinst = new web3.eth.Contract(\n        Waterexchange.abi,\n        WaterExchangeData.address\n      );\n      this.setState({ waterExchangeinst });\n    }\n    //Autheticate Exchange\n    await this.authenticate();\n  }\n  //############ LOAD BLOCKCHAIN DATA & CREATING CONTRACT INSTANCE SECTION-->END ############\n  //Function to check login address is registered or not\n  async authenticate() {\n    let exchangecount = await this.state.waterExchangeinst.methods\n      .exchangeCount()\n      .call();\n    // Iterating through all registered exchange address\n    for (let i = 1; i <= exchangecount; i++) {\n      var address = await this.state.waterExchangeinst.methods\n        .exchange(i)\n        .call();\n      if (address == this.state.account) {\n        this.setState({ registered: true });\n      }\n    }\n  }\n  //###################### STATES - SECTION-->START #####################\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      registered: false,\n      waterExchangeinst: {},\n    };\n  }\n  //###################### STATES - SECTION-->END #####################\n\n  // ############## RENDERING SECTION--->START ################\n  render() {\n    var content;\n    //If registered redirect to waterexchange profile page\n    if (this.state.registered === true) {\n      content = <Waterexchangeprof />;\n    } else {\n      content = (\n        <div\n          style={{\n            backgroundColor: \"#221f3b\",\n            height: \"1000px\",\n          }}\n          className=\"text-danger\"\n        >\n          <h1 style={{ textAlign: \"center\" }}>\n            YOU ARE NOT A REGISTERED WATER-EXCHANGE!!!\n          </h1>\n          ;\n        </div>\n      );\n    }\n    return content;\n  }\n}\n// ############## RENDERING SECTION--->END ################\nexport default Exchangesignup;\n","import React, { Component } from \"react\";\nimport { loadWeb3 } from \"../../functions/helper\";\nimport Sale from \"../../contracts/Watersale.json\";\nimport OxidaneToken from \"../../contracts/OxidaneToken.json\";\nimport Logoutnav from \"../Basic/logoutnav\";\nclass RTI extends Component {\n  async componentWillMount() {\n    await loadWeb3();\n    await this.loadBlockchaindata();\n  }\n\n  //############ LOAD BLOCKCHAIN DATA & CREATING CONTRACT INSTANCE SECTION-->START ############\n\n  async loadBlockchaindata() {\n    const web3 = window.web3;\n\n    //FETCHING ACCOUNT\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n\n    //GETTING NETWORKID\n    const networkId = await web3.eth.net.getId();\n\n    //CREATING TOKEN CONTRACT INSTANCE\n\n    const tokenData = OxidaneToken.networks[networkId];\n    if (tokenData) {\n      const token = new web3.eth.Contract(OxidaneToken.abi, tokenData.address);\n      this.setState({ token });\n    }\n\n    //CREATING WATERSALE CONTRACT INSTANCE\n\n    const WaterSaleData = Sale.networks[networkId];\n    if (WaterSaleData) {\n      const waterSaleinst = new web3.eth.Contract(\n        Sale.abi,\n        WaterSaleData.address\n      );\n      //storing instance\n      this.setState({ waterSaleinst });\n      await this.state.waterSaleinst.getPastEvents(\n        \"WaterPurchase\",\n        {\n          fromBlock: 0,\n          toBlock: \"latest\",\n        },\n        (err, events) => {\n          for (var n = 0; n <= events.length - 1; n++) {\n            var pendingarray = events[n].returnValues;\n            //storing all the list in pending list array\n            this.setState({\n              pendinglist: [...this.state.pendinglist, pendingarray],\n            });\n          }\n        }\n      );\n\n      await this.state.waterSaleinst.getPastEvents(\n        \"WaterDelivery\",\n        {\n          fromBlock: 0,\n          toBlock: \"latest\",\n        },\n        (err, events) => {\n          console.log(events);\n          for (var m = 0; m <= events.length - 1; m++) {\n            var deliveredarray = events[m].returnValues;\n            //storing all the list in delivered list array\n            this.setState({\n              deliveredlist: [...this.state.deliveredlist, deliveredarray],\n            });\n          }\n        }\n      );\n\n      await this.state.waterSaleinst.getPastEvents(\n        \"DeliveryConfirmation\",\n        {\n          fromBlock: 0,\n          toBlock: \"latest\",\n        },\n        (err, events) => {\n          for (var p = 0; p <= events.length - 1; p++) {\n            var receivedarray = events[p].returnValues;\n            //storing all the list in receivedList list array\n            this.setState({\n              receivedList: [...this.state.receivedList, receivedarray],\n            });\n          }\n        }\n      );\n\n      await this.state.waterSaleinst.getPastEvents(\n        \"DeliveryRejection\",\n        {\n          fromBlock: 0,\n          toBlock: \"latest\",\n        },\n        (err, events) => {\n          for (var q = 0; q <= events.length - 1; q++) {\n            var rejectedarray = events[q].returnValues;\n            //storing all the list in pending list array\n            this.setState({\n              rejectlist: [...this.state.rejectlist, rejectedarray],\n            });\n          }\n        }\n      );\n    } else {\n      window.alert(\"Tokensale contract not deployed to network\");\n    }\n    console.log(this.state.loading);\n  }\n\n  //############ LOAD BLOCKCHAIN DATA & CREATING INSTANCE- SECTION-->END ############\n\n  //###################### STATES - SECTION-->START #####################\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      waterExchangeinst: {},\n      waterSaleinst: {},\n      exchangeAddress: \"\",\n      token: {},\n      deliverylist: [],\n      deliveredlist: [],\n      rejectlist: [],\n      totalpurchase_Count: 0,\n      pendinglist: [],\n      receivedList: [],\n      deliverytime: 0,\n      tokenamount: 0,\n      purchasenumber: 0,\n      status: 0,\n      loading: false,\n    };\n  }\n\n  //###################### STATES - SECTION-->END #####################\n  render() {\n    return (\n      <div\n        style={{\n          backgroundColor: \"#221f3b\",\n          height: \"1000px\",\n        }}\n      >\n        <Logoutnav />\n\n        <div className=\"container\">\n          <h3>ALL PURCHASE DETAILS FOR PUBLIC</h3>\n          <div\n            className=\"card card border-danger text-danger \"\n            style={{\n              backgroundColor: \"#221f3b\",\n            }}\n          >\n            <div class=\"card-body\">\n              {/* Displaying Pending list */}\n              <h5 class=\"card-title\">DELIVERY PENDING LIST</h5>\n              <table class=\"table table-bordered text-white \">\n                <thead className=\"thead-dark\">\n                  <tr className=\"\">\n                    <th scope=\"col\">SL NO</th>\n                    <th scope=\"col\">PurchaseNO</th>\n                    <th scope=\"col\">Exchange Address</th>\n                    <th scope=\"col\">WaterType</th>\n                    <th scope=\"col\">Quantity</th>\n                    <th scope=\"col\">Timestamp</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.state.pendinglist.map((ex, key1) => {\n                    var a;\n                    if (ex.watertype == 0) {\n                      a = \"Drinking\";\n                    } else {\n                      a = \"Non-Drinking\";\n                    }\n                    return (\n                      <tr>\n                        <th scope=\"row\">{key1}</th>\n                        <td>{ex.globalpurchasenumber}</td>\n                        <td>{ex.exchangeaddr}</td>\n                        <td>{a}</td>\n                        <td>{ex._quantity}</td>\n                        <td>{ex._time}</td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          <div\n            className=\"card card border-success text-success \"\n            style={{\n              backgroundColor: \"#221f3b\",\n            }}\n          >\n            <div class=\"card-body\">\n              {/* Displaying Delivered list */}\n              <h5 class=\"card-title\">DELIVERED LIST</h5>\n              <table class=\"table table-bordered text-white\">\n                <thead className=\"thead-dark\">\n                  <tr>\n                    <th scope=\"col\">SL NO</th>\n                    <th scope=\"col\">PurchaseNO</th>\n                    <th scope=\"col\">Exchange Address</th>\n                    <th scope=\"col\">WaterType</th>\n                    <th scope=\"col\">Quantity</th>\n                    <th scope=\"col\">Timestamp</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.state.deliveredlist.map((ex2, key2) => {\n                    var b;\n                    if (ex2.watertype == 0) {\n                      b = \"Drinking\";\n                    } else {\n                      b = \"Non-Drinking\";\n                    }\n                    return (\n                      <tr className=\"\">\n                        <th scope=\"row\">{key2}</th>\n                        <td>{ex2.globalpurchasenumber}</td>\n                        <td>{ex2.exchangeaddr}</td>\n                        <td>{b}</td>\n                        <td>{ex2.quantity}</td>\n                        <td>{ex2._time}</td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          <div\n            className=\"card card border-warning text-info \"\n            style={{\n              backgroundColor: \"#221f3b\",\n            }}\n          >\n            <div class=\"card-body\">\n              {/* Displaying Received list */}\n              <h5 class=\"card-title\">DELIVERY RECEIVED LIST</h5>\n              <table class=\"table table-bordered text-white\">\n                <thead className=\"thead-dark\">\n                  <tr>\n                    <th scope=\"col\">SL NO</th>\n                    <th scope=\"col\">PurchaseNO</th>\n                    <th scope=\"col\">Exchange Address</th>\n                    <th scope=\"col\">WaterType</th>\n                    <th scope=\"col\">Quantity</th>\n                    <th scope=\"col\">Timestamp</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.state.receivedList.map((ex, key3) => {\n                    var c;\n                    if (ex.watertype == 0) {\n                      c = \"Drinking\";\n                    } else {\n                      c = \"Non-Drinking\";\n                    }\n                    return (\n                      <tr>\n                        <th scope=\"row\">{key3}</th>\n                        <td>{ex.globalpurchasenumber}</td>\n                        <td>{ex.exchangeaddr}</td>\n                        <td>{c}</td>\n                        <td>{ex.quantity}</td>\n                        <td>{ex._time}</td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          <div\n            className=\"card card border text-white \"\n            style={{\n              backgroundColor: \"#221f3b\",\n            }}\n          >\n            <div class=\"card-body\">\n              {/* Displaying Received list */}\n              <h5 class=\"card-title\">DELIVERY REJECTED LIST</h5>\n              <table class=\"table table-bordered text-white\">\n                <thead className=\"thead-dark\">\n                  <tr>\n                    <th scope=\"col\">SL NO</th>\n                    <th scope=\"col\">PurchaseNO</th>\n                    <th scope=\"col\">Exchange Address</th>\n                    <th scope=\"col\">TimeStamp</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.state.rejectlist.map((ex, key3) => {\n                    return (\n                      <tr>\n                        <th scope=\"row\">{key3}</th>\n                        <td>{ex.globalpurchasenumber}</td>\n                        <td>{ex.exchangeaddr}</td>\n                        <td>{ex._time}</td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default RTI;\n","import React from 'react';\nimport {BrowserRouter,Switch,Route} from \"react-router-dom\";\nimport Welcomepage from \"../components/WelcomePage\";\nimport Profilepage from \"../components/Customer/UserProfilePage\";\nimport Adminpage from \"../components/Admin/AdminProfile\";\nimport Exchangepage from \"../components/Exchange/WaterExchangeProfile\"\nimport Signup from \"../components/Customer/Signup/Signup\";\nimport Exchangesignup from \"../components/Exchange/exchangesignup\"\nimport Rti from \"../components/RTI/rti\"\n                             \nconst Routes = ()=>{\n    return(\n        <BrowserRouter>\n      \n        <Switch>\n            <Route path=\"/\" exact component={Welcomepage}/>\n            <Route path=\"/admin\" exact component={Adminpage}/>\n            <Route path=\"/profilepage\" exact component={Profilepage}/>\n            <Route path=\"/exchangesignup\" exact component={Exchangesignup}/>\n            <Route path=\"/signup\" exact component={Signup}/>\n             <Route path=\"/Rti\" exact component={Rti}/> \n        </Switch>\n       \n        </BrowserRouter>\n    )\n};\nexport default Routes","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './Routes/Routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Routes/>,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import Web3 from \"web3\";\n\n  export const loadWeb3= async ()=> {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  }","import React, { Component } from \"react\";\nimport { loadWeb3 } from \"../../functions/helper\";\nimport Loader from \"../Basic/Loader\";\nimport Logoutnav from \"../Basic/logoutnav\";\nimport Waterexchange from \"../../contracts/Waterexchange.json\";\nimport \"../css/adminprofile.css\";\nimport IPFSloader from \"../Basic/ipfsloader\";\nconst ipfsClient = require(\"ipfs-http-client\");\n//Creating IPFS instance\nconst ipfs = ipfsClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\",\n});\n\nclass Adminprofile extends Component {\n  async componentWillMount() {\n    await loadWeb3();\n    await this.loadBlockchaindata();\n  }\n\n  //############ LOAD BLOCKCHAIN DATA & CREATING CONTRACT INSTANCE SECTION-->START ############\n\n  async loadBlockchaindata() {\n    this.setState({ loading: true });\n    const web3 = window.web3;\n\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n\n    //GETTING NETWORKID\n\n    const networkId = await web3.eth.net.getId();\n\n    //CREATING WATER EXCHANGE CONTRACT INSTANCE\n\n    const WaterExchangeData = Waterexchange.networks[networkId];\n    if (WaterExchangeData) {\n      const waterExchangeinst = new web3.eth.Contract(\n        Waterexchange.abi,\n        WaterExchangeData.address\n      );\n      this.setState({ waterExchangeinst });\n\n      this.setState({ exchanges: [] });\n      //FETCHING TOTAL NUMBER OF EXCHNAGES\n      const exchange_Count = parseInt(\n        await this.state.waterExchangeinst.methods.exchangeCount().call()\n      );\n      this.setState({ exchange_Count });\n\n      //FETCHING EXCHANGE DETAILS\n\n      for (var i = 1; i <= this.state.exchange_Count; i++) {\n        let exchangeAddress = await waterExchangeinst.methods\n          .exchange(i)\n          .call();\n        let exchange = await waterExchangeinst.methods\n          .localExchange(exchangeAddress)\n          .call();\n        this.setState({ exchanges: [...this.state.exchanges, exchange] });\n      }\n    }\n    this.setState({ loading: false });\n    console.log(this.state.exchanges);\n  }\n\n  //############ LOAD BLOCKCHAIN DATA & CREATING INSTANCE- SECTION-->END ############\n\n  //###################### STATES - SECTION-->START #####################\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      waterExchangeinst: {},\n      exchangeAddress: \"\",\n      exchanges: [],\n      exchange_Count: \"\",\n      location: \"\",\n      cluster: 0,\n      buffer: null,\n      loading: false,\n      hash: \"\",\n    };\n  }\n  //###################### STATES - SECTION-->END #####################\n\n  //##### FRONT-END DATA FETCHING & SMART-CONTRACT FUNCTION INTERACTION - SECTION-->START #######\n\n  //FUNCTION TO HANDLE INPUT DATA\n\n  handleInputChange = (event) => {\n    event.preventDefault();\n    //storing input\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  //IPFS FILE CAPTURE\n  captureFile = (event) => {\n    event.preventDefault();\n    const file = event.target.files[0];\n    const reader = new window.FileReader();\n    reader.readAsArrayBuffer(file);\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) });\n      console.log(\"buffer\", this.state.buffer);\n    };\n  };\n\n  //FUNCTION TO SUBMIT DATA\n  handleSubmit = async (event) => {\n    event.preventDefault();\n\n    let register = await this.state.waterExchangeinst.methods\n      .localExchange(this.state.exchangeAddress)\n      .call();\n    let registered = register.registered;\n\n    //IF NOT REGISTERD\n    if (!registered) {\n      // REGISTERING EXCHANGE\n      this.setState({ loading: true });\n      console.log(\"Submitting file to ipfs...\");\n      // Submiting IPFS\n      ipfs.add(this.state.buffer, async (error, result) => {\n        console.log(\"Ipfs result\", result[0].hash);\n        if (error) {\n          console.log(error);\n          return;\n        }\n        //Registering Exchange\n        await this.state.waterExchangeinst.methods\n          .registerExchange(\n            this.state.exchangeAddress,\n            this.state.location,\n            this.state.cluster,\n            result[0].hash\n          )\n          .send({ from: this.state.account })\n          .then((r) => {\n            return this.setState({ loading: false });\n          });\n      });\n\n      //IF ALREADY REGISTERED\n    } else {\n      alert(\"EXCHANGE ALREADY REGISTERED\");\n    }\n  };\n\n  //##### FRONT-END DATA FETCHING & SMART-CONTRACT FUNCTION INTERACTION - SECTION--->END #######\n\n  // ############## RENDERING SECTION--->START ################\n  render() {\n    if (this.state.loading) {\n      return <IPFSloader />;\n    } else {\n      return (\n        <div\n          style={{\n            backgroundColor: \"#221f3b\",\n            height: \"1000px\",\n          }}\n          className=\"\"\n        >\n          <Logoutnav />\n          <div className=\"adminprofile\">\n            <div\n              className=\"card card border-info text-white \"\n              style={{\n                backgroundColor: \"#221f3b\",\n              }}\n            >\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">WATER-EXCHANGE REGISTRATION</h5>\n                <form\n                  onSubmit={this.handleSubmit}\n                  encType=\"multipart/form-data\"\n                >\n                  <div className=\"form-group \">\n                    {/* Fetching Exchange Address */}\n                    <label className=\"text-black\" for=\"exampleInputEmail1\">\n                      Water-Exchange Address\n                    </label>\n                    <input\n                      name=\"exchangeAddress\"\n                      type=\"text\"\n                      required\n                      onChange={this.handleInputChange}\n                    />\n                  </div>\n                  {/* Fetching location */}\n                  <div className=\"form-group\">\n                    <label for=\"exampleInputPassword1\">Location</label>\n                    <input\n                      name=\"location\"\n                      id=\"icon_prefix\"\n                      type=\"text\"\n                      required\n                      class=\"validate\"\n                      onChange={this.handleInputChange}\n                    />\n                  </div>\n                  {/* Fetching cluster */}\n                  <div className=\"form-group\">\n                    <label for=\"exampleInputPassword1\">Location</label>\n                    <select\n                      className=\"form-control\"\n                      id=\"exampleFormControlSelect1\"\n                      name=\"cluster\"\n                      onChange={this.handleInputChange}\n                    >\n                      <option>Select Cluster</option>\n                      <option value=\"0\">Central Kerala</option>\n                      <option value=\"1\">North Kerala</option>\n                      <option value=\"2\">South Kerala</option>\n                    </select>\n                  </div>\n\n                  {/* Fetching Registration Certificate */}\n                  <div className=\"form-group\">\n                    <label for=\"exampleFormControlSelect1\">\n                      Select APPROVAL CERTIFICATE FILE\n                    </label>\n                    <input type=\"file\" onChange={this.captureFile} />\n                    <input type=\"submit\" class=\"btn btn-success\" />\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n          {/* Displaying Registered Exchanges */}\n          <div className=\"tableheading\">\n            <h4 className=\"text-white\">REGISTERED WATER-EXCHANGE DETAILS</h4>\n          </div>\n          <div className=\"container\">\n            <table className=\"table table-dark  tabledit\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">EXCHANGE NO</th>\n                  <th scope=\"col\">EXCHANGE ADDRESS</th>\n                  <th scope=\"col\">LOCATION</th>\n                  <th scope=\"col\">CLUSTER</th>\n                  <th scope=\"col\">IPFS CERTIFICATE</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.exchanges.map((ex, key) => {\n                  return (\n                    <tr>\n                      <th scope=\"row\">{ex.exchangeNumber}</th>\n                      <td>{ex.exchangeAddress}</td>\n                      <td>{ex.location}</td>\n                      <td>{ex.region}</td>\n                      <td>\n                        <a\n                          href={\"https://ipfs.infura.io/ipfs/\" + ex.certificate}\n                        >\n                          {ex.certificate}\n                        </a>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\n// ############## RENDERING SECTION--->END  ################\nexport default Adminprofile;\n","import React, { Component } from \"react\";\nclass IPFSLoader extends Component {\n  state = {};\n  render() {\n    return (\n        <div style={{ backgroundColor: '#221f3b',height:\"1000px\"}}>\n        <div className=\"text-center \" style={{position:\"relative\",top:\"300px\"}}>\n          <h1 className=\"text-white\">Please wait..Submiting Certificate to IPFS..</h1>\n      <div class=\"spinner-grow text-danger\" style={{width: \"3rem\", height: \"3rem\"}} role=\"status\">\n        <span class=\"sr-only\">Loading...</span>\n      </div>\n      <div class=\"spinner-grow text-success\" style={{width: \"3rem\", height: \"3rem\"}} role=\"status\">\n        <span class=\"sr-only\">Loading...</span>\n      </div>\n      <div class=\"spinner-grow text-info\" style={{width: \"3rem\", height: \"3rem\"}} role=\"status\">\n        <span class=\"sr-only\">Loading...</span>\n      </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default IPFSLoader;","var TxtType = function(el, toRotate, period) {\n    this.toRotate = toRotate;\n    this.el = el;\n    this.loopNum = 0;\n    this.period = parseInt(period, 10) || 2000;\n    this.txt = '';\n    this.tick();\n    this.isDeleting = false;\n};\n\nTxtType.prototype.tick = function() {\n    var i = this.loopNum % this.toRotate.length;\n    var fullTxt = this.toRotate[i];\n\n    if (this.isDeleting) {\n    this.txt = fullTxt.substring(0, this.txt.length - 1);\n    } else {\n    this.txt = fullTxt.substring(0, this.txt.length + 1);\n    }\n\n    this.el.innerHTML = '<span class=\"wrap\">'+this.txt+'</span>';\n\n    var that = this;\n    var delta = 200 - Math.random() * 100;\n\n    if (this.isDeleting) { delta /= 2; }\n\n    if (!this.isDeleting && this.txt === fullTxt) {\n    delta = this.period;\n    this.isDeleting = true;\n    } else if (this.isDeleting && this.txt === '') {\n    this.isDeleting = false;\n    this.loopNum++;\n    delta = 500;\n    }\n\n    setTimeout(function() {\n    that.tick();\n    }, delta);\n};\n\nwindow.onload = function() {\n    var elements = document.getElementsByClassName('typewrite');\n    for (var i=0; i<elements.length; i++) {\n        var toRotate = elements[i].getAttribute('data-type');\n        var period = elements[i].getAttribute('data-period');\n        if (toRotate) {\n          new TxtType(elements[i], JSON.parse(toRotate), period);\n        }\n    }\n    // INJECT CSS\n    var css = document.createElement(\"style\");\n    css.type = \"text/css\";\n    css.innerHTML = \".typewrite > .wrap { border-right: 0.08em solid #fff}\";\n    document.body.appendChild(css);\n};"],"sourceRoot":""}